
LVBMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d50  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08002ed8  08002ed8  00012ed8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002f0c  08002f0c  00012f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002f10  08002f10  00012f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  20000000  08002f14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
  7 .bss          0000019c  20000074  20000074  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000210  20000210  00020074  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000b6c8  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001f63  00000000  00000000  0002b76c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004322  00000000  00000000  0002d6cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000006b8  00000000  00000000  000319f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000009f0  00000000  00000000  000320b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00004371  00000000  00000000  00032aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000301a  00000000  00000000  00036e11  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00039e2b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000015a8  00000000  00000000  00039ea8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000074 	.word	0x20000074
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002ec0 	.word	0x08002ec0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000078 	.word	0x20000078
 80001c4:	08002ec0 	.word	0x08002ec0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__gedf2>:
 800095c:	f04f 3cff 	mov.w	ip, #4294967295
 8000960:	e006      	b.n	8000970 <__cmpdf2+0x4>
 8000962:	bf00      	nop

08000964 <__ledf2>:
 8000964:	f04f 0c01 	mov.w	ip, #1
 8000968:	e002      	b.n	8000970 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__cmpdf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000986:	d01b      	beq.n	80009c0 <__cmpdf2+0x54>
 8000988:	b001      	add	sp, #4
 800098a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800098e:	bf0c      	ite	eq
 8000990:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000994:	ea91 0f03 	teqne	r1, r3
 8000998:	bf02      	ittt	eq
 800099a:	ea90 0f02 	teqeq	r0, r2
 800099e:	2000      	moveq	r0, #0
 80009a0:	4770      	bxeq	lr
 80009a2:	f110 0f00 	cmn.w	r0, #0
 80009a6:	ea91 0f03 	teq	r1, r3
 80009aa:	bf58      	it	pl
 80009ac:	4299      	cmppl	r1, r3
 80009ae:	bf08      	it	eq
 80009b0:	4290      	cmpeq	r0, r2
 80009b2:	bf2c      	ite	cs
 80009b4:	17d8      	asrcs	r0, r3, #31
 80009b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ba:	f040 0001 	orr.w	r0, r0, #1
 80009be:	4770      	bx	lr
 80009c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c8:	d102      	bne.n	80009d0 <__cmpdf2+0x64>
 80009ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ce:	d107      	bne.n	80009e0 <__cmpdf2+0x74>
 80009d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d1d6      	bne.n	8000988 <__cmpdf2+0x1c>
 80009da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009de:	d0d3      	beq.n	8000988 <__cmpdf2+0x1c>
 80009e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop

080009e8 <__aeabi_cdrcmple>:
 80009e8:	4684      	mov	ip, r0
 80009ea:	4610      	mov	r0, r2
 80009ec:	4662      	mov	r2, ip
 80009ee:	468c      	mov	ip, r1
 80009f0:	4619      	mov	r1, r3
 80009f2:	4663      	mov	r3, ip
 80009f4:	e000      	b.n	80009f8 <__aeabi_cdcmpeq>
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdcmpeq>:
 80009f8:	b501      	push	{r0, lr}
 80009fa:	f7ff ffb7 	bl	800096c <__cmpdf2>
 80009fe:	2800      	cmp	r0, #0
 8000a00:	bf48      	it	mi
 8000a02:	f110 0f00 	cmnmi.w	r0, #0
 8000a06:	bd01      	pop	{r0, pc}

08000a08 <__aeabi_dcmpeq>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff fff4 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a10:	bf0c      	ite	eq
 8000a12:	2001      	moveq	r0, #1
 8000a14:	2000      	movne	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmplt>:
 8000a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a20:	f7ff ffea 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a24:	bf34      	ite	cc
 8000a26:	2001      	movcc	r0, #1
 8000a28:	2000      	movcs	r0, #0
 8000a2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2e:	bf00      	nop

08000a30 <__aeabi_dcmple>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff ffe0 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a38:	bf94      	ite	ls
 8000a3a:	2001      	movls	r0, #1
 8000a3c:	2000      	movhi	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmpge>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffce 	bl	80009e8 <__aeabi_cdrcmple>
 8000a4c:	bf94      	ite	ls
 8000a4e:	2001      	movls	r0, #1
 8000a50:	2000      	movhi	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmpgt>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffc4 	bl	80009e8 <__aeabi_cdrcmple>
 8000a60:	bf34      	ite	cc
 8000a62:	2001      	movcc	r0, #1
 8000a64:	2000      	movcs	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpun>:
 8000a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	d102      	bne.n	8000a7c <__aeabi_dcmpun+0x10>
 8000a76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7a:	d10a      	bne.n	8000a92 <__aeabi_dcmpun+0x26>
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x20>
 8000a86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8a:	d102      	bne.n	8000a92 <__aeabi_dcmpun+0x26>
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	f04f 0001 	mov.w	r0, #1
 8000a96:	4770      	bx	lr

08000a98 <__aeabi_d2uiz>:
 8000a98:	004a      	lsls	r2, r1, #1
 8000a9a:	d211      	bcs.n	8000ac0 <__aeabi_d2uiz+0x28>
 8000a9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa0:	d211      	bcs.n	8000ac6 <__aeabi_d2uiz+0x2e>
 8000aa2:	d50d      	bpl.n	8000ac0 <__aeabi_d2uiz+0x28>
 8000aa4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aa8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aac:	d40e      	bmi.n	8000acc <__aeabi_d2uiz+0x34>
 8000aae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ab6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aba:	fa23 f002 	lsr.w	r0, r3, r2
 8000abe:	4770      	bx	lr
 8000ac0:	f04f 0000 	mov.w	r0, #0
 8000ac4:	4770      	bx	lr
 8000ac6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aca:	d102      	bne.n	8000ad2 <__aeabi_d2uiz+0x3a>
 8000acc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad0:	4770      	bx	lr
 8000ad2:	f04f 0000 	mov.w	r0, #0
 8000ad6:	4770      	bx	lr

08000ad8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ada:	4a0e      	ldr	r2, [pc, #56]	; (8000b14 <HAL_InitTick+0x3c>)
 8000adc:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <HAL_InitTick+0x40>)
{
 8000ade:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ae0:	7818      	ldrb	r0, [r3, #0]
 8000ae2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ae6:	fbb3 f3f0 	udiv	r3, r3, r0
 8000aea:	6810      	ldr	r0, [r2, #0]
 8000aec:	fbb0 f0f3 	udiv	r0, r0, r3
 8000af0:	f000 feae 	bl	8001850 <HAL_SYSTICK_Config>
 8000af4:	4604      	mov	r4, r0
 8000af6:	b958      	cbnz	r0, 8000b10 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af8:	2d0f      	cmp	r5, #15
 8000afa:	d809      	bhi.n	8000b10 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000afc:	4602      	mov	r2, r0
 8000afe:	4629      	mov	r1, r5
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	f000 fe62 	bl	80017cc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b08:	4b04      	ldr	r3, [pc, #16]	; (8000b1c <HAL_InitTick+0x44>)
 8000b0a:	4620      	mov	r0, r4
 8000b0c:	601d      	str	r5, [r3, #0]
 8000b0e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000b10:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8000b12:	bd38      	pop	{r3, r4, r5, pc}
 8000b14:	20000008 	.word	0x20000008
 8000b18:	20000000 	.word	0x20000000
 8000b1c:	20000004 	.word	0x20000004

08000b20 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b20:	4a07      	ldr	r2, [pc, #28]	; (8000b40 <HAL_Init+0x20>)
{
 8000b22:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b24:	6813      	ldr	r3, [r2, #0]
 8000b26:	f043 0310 	orr.w	r3, r3, #16
 8000b2a:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b2c:	2003      	movs	r0, #3
 8000b2e:	f000 fe3b 	bl	80017a8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b32:	2000      	movs	r0, #0
 8000b34:	f7ff ffd0 	bl	8000ad8 <HAL_InitTick>
  HAL_MspInit();
 8000b38:	f001 fdfc 	bl	8002734 <HAL_MspInit>
}
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	bd08      	pop	{r3, pc}
 8000b40:	40022000 	.word	0x40022000

08000b44 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000b44:	4a03      	ldr	r2, [pc, #12]	; (8000b54 <HAL_IncTick+0x10>)
 8000b46:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <HAL_IncTick+0x14>)
 8000b48:	6811      	ldr	r1, [r2, #0]
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	440b      	add	r3, r1
 8000b4e:	6013      	str	r3, [r2, #0]
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	20000094 	.word	0x20000094
 8000b58:	20000000 	.word	0x20000000

08000b5c <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000b5c:	4b01      	ldr	r3, [pc, #4]	; (8000b64 <HAL_GetTick+0x8>)
 8000b5e:	6818      	ldr	r0, [r3, #0]
}
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	20000094 	.word	0x20000094

08000b68 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000b6c:	f7ff fff6 	bl	8000b5c <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b70:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000b72:	bf1c      	itt	ne
 8000b74:	4b05      	ldrne	r3, [pc, #20]	; (8000b8c <HAL_Delay+0x24>)
 8000b76:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000b78:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000b7a:	bf18      	it	ne
 8000b7c:	18e4      	addne	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b7e:	f7ff ffed 	bl	8000b5c <HAL_GetTick>
 8000b82:	1b40      	subs	r0, r0, r5
 8000b84:	4284      	cmp	r4, r0
 8000b86:	d8fa      	bhi.n	8000b7e <HAL_Delay+0x16>
  {
  }
}
 8000b88:	bd38      	pop	{r3, r4, r5, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000000 	.word	0x20000000

08000b90 <HAL_ADC_ConvCpltCallback>:
 8000b90:	4770      	bx	lr

08000b92 <HAL_ADC_ConvHalfCpltCallback>:
 8000b92:	4770      	bx	lr

08000b94 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000b94:	4770      	bx	lr

08000b96 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8000b96:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000b98:	6803      	ldr	r3, [r0, #0]
{
 8000b9a:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000b9c:	6898      	ldr	r0, [r3, #8]
 8000b9e:	f000 0003 	and.w	r0, r0, #3
 8000ba2:	2801      	cmp	r0, #1
 8000ba4:	d001      	beq.n	8000baa <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000ba6:	2000      	movs	r0, #0
 8000ba8:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	07d2      	lsls	r2, r2, #31
 8000bae:	d5fa      	bpl.n	8000ba6 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000bb0:	689a      	ldr	r2, [r3, #8]
 8000bb2:	f002 020d 	and.w	r2, r2, #13
 8000bb6:	2a01      	cmp	r2, #1
 8000bb8:	d11b      	bne.n	8000bf2 <ADC_Disable+0x5c>
      __HAL_ADC_DISABLE(hadc);
 8000bba:	689a      	ldr	r2, [r3, #8]
 8000bbc:	f042 0202 	orr.w	r2, r2, #2
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	2203      	movs	r2, #3
 8000bc4:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8000bc6:	f7ff ffc9 	bl	8000b5c <HAL_GetTick>
 8000bca:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000bcc:	6823      	ldr	r3, [r4, #0]
 8000bce:	689b      	ldr	r3, [r3, #8]
 8000bd0:	07db      	lsls	r3, r3, #31
 8000bd2:	d5e8      	bpl.n	8000ba6 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000bd4:	f7ff ffc2 	bl	8000b5c <HAL_GetTick>
 8000bd8:	1b40      	subs	r0, r0, r5
 8000bda:	2802      	cmp	r0, #2
 8000bdc:	d9f6      	bls.n	8000bcc <ADC_Disable+0x36>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000bde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000be0:	f043 0310 	orr.w	r3, r3, #16
 8000be4:	6423      	str	r3, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000be6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	6463      	str	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 8000bee:	2001      	movs	r0, #1
 8000bf0:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000bf2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000bf4:	f043 0310 	orr.w	r3, r3, #16
 8000bf8:	6423      	str	r3, [r4, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bfa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8000c02:	bd38      	pop	{r3, r4, r5, pc}

08000c04 <ADC_Enable>:
{
 8000c04:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000c06:	6803      	ldr	r3, [r0, #0]
 8000c08:	689a      	ldr	r2, [r3, #8]
 8000c0a:	f002 0203 	and.w	r2, r2, #3
 8000c0e:	2a01      	cmp	r2, #1
{
 8000c10:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000c12:	d104      	bne.n	8000c1e <ADC_Enable+0x1a>
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	07d2      	lsls	r2, r2, #31
 8000c18:	d501      	bpl.n	8000c1e <ADC_Enable+0x1a>
  return HAL_OK;
 8000c1a:	2000      	movs	r0, #0
 8000c1c:	bd38      	pop	{r3, r4, r5, pc}
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000c1e:	6899      	ldr	r1, [r3, #8]
 8000c20:	4a0e      	ldr	r2, [pc, #56]	; (8000c5c <ADC_Enable+0x58>)
 8000c22:	4211      	tst	r1, r2
 8000c24:	d10f      	bne.n	8000c46 <ADC_Enable+0x42>
    __HAL_ADC_ENABLE(hadc);
 8000c26:	689a      	ldr	r2, [r3, #8]
 8000c28:	f042 0201 	orr.w	r2, r2, #1
 8000c2c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 8000c2e:	f7ff ff95 	bl	8000b5c <HAL_GetTick>
 8000c32:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000c34:	6823      	ldr	r3, [r4, #0]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	07db      	lsls	r3, r3, #31
 8000c3a:	d4ee      	bmi.n	8000c1a <ADC_Enable+0x16>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000c3c:	f7ff ff8e 	bl	8000b5c <HAL_GetTick>
 8000c40:	1b40      	subs	r0, r0, r5
 8000c42:	2802      	cmp	r0, #2
 8000c44:	d9f6      	bls.n	8000c34 <ADC_Enable+0x30>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000c48:	f043 0310 	orr.w	r3, r3, #16
 8000c4c:	6423      	str	r3, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c4e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	6463      	str	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 8000c56:	2001      	movs	r0, #1
 8000c58:	bd38      	pop	{r3, r4, r5, pc}
 8000c5a:	bf00      	nop
 8000c5c:	8000003f 	.word	0x8000003f

08000c60 <ADC_DMAError>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000c60:	6a40      	ldr	r0, [r0, #36]	; 0x24
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000c62:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000c64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c68:	6403      	str	r3, [r0, #64]	; 0x40
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000c6a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000c6c:	f043 0304 	orr.w	r3, r3, #4
 8000c70:	6443      	str	r3, [r0, #68]	; 0x44
      HAL_ADC_ErrorCallback(hadc);
 8000c72:	f7ff bf8f 	b.w	8000b94 <HAL_ADC_ErrorCallback>

08000c76 <ADC_DMAHalfConvCplt>:
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000c76:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000c78:	f7ff bf8b 	b.w	8000b92 <HAL_ADC_ConvHalfCpltCallback>

08000c7c <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000c7c:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000c7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c80:	f012 0f50 	tst.w	r2, #80	; 0x50
 8000c84:	d118      	bne.n	8000cb8 <ADC_DMAConvCplt+0x3c>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000c86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000c8c:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	68d2      	ldr	r2, [r2, #12]
 8000c92:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8000c96:	d10c      	bne.n	8000cb2 <ADC_DMAConvCplt+0x36>
 8000c98:	7e5a      	ldrb	r2, [r3, #25]
 8000c9a:	b952      	cbnz	r2, 8000cb2 <ADC_DMAConvCplt+0x36>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000c9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000ca2:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ca4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ca6:	04d2      	lsls	r2, r2, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000ca8:	bf5e      	ittt	pl
 8000caa:	6c1a      	ldrpl	r2, [r3, #64]	; 0x40
 8000cac:	f042 0201 	orrpl.w	r2, r2, #1
 8000cb0:	641a      	strpl	r2, [r3, #64]	; 0x40
      HAL_ADC_ConvCpltCallback(hadc);
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff bf6c 	b.w	8000b90 <HAL_ADC_ConvCpltCallback>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbc:	4718      	bx	r3
	...

08000cc0 <HAL_ADC_Init>:
{
 8000cc0:	b570      	push	{r4, r5, r6, lr}
 8000cc2:	b096      	sub	sp, #88	; 0x58
  __IO uint32_t wait_loop_index = 0U;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 8000cc8:	4604      	mov	r4, r0
 8000cca:	2800      	cmp	r0, #0
 8000ccc:	f000 80e5 	beq.w	8000e9a <HAL_ADC_Init+0x1da>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000cd0:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000cd2:	06d5      	lsls	r5, r2, #27
 8000cd4:	f100 80ce 	bmi.w	8000e74 <HAL_ADC_Init+0x1b4>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000cd8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	f000 8094 	beq.w	8000e08 <HAL_ADC_Init+0x148>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ce0:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000ce2:	6823      	ldr	r3, [r4, #0]
 8000ce4:	689a      	ldr	r2, [r3, #8]
 8000ce6:	00d2      	lsls	r2, r2, #3
 8000ce8:	d502      	bpl.n	8000cf0 <HAL_ADC_Init+0x30>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000cea:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	d50a      	bpl.n	8000d06 <HAL_ADC_Init+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 8000cf0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000cf2:	f023 0312 	bic.w	r3, r3, #18
 8000cf6:	f043 0310 	orr.w	r3, r3, #16
 8000cfa:	6423      	str	r3, [r4, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cfc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000cfe:	f043 0301 	orr.w	r3, r3, #1
 8000d02:	6463      	str	r3, [r4, #68]	; 0x44
      tmp_hal_status = HAL_ERROR;
 8000d04:	2001      	movs	r0, #1
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d08:	06de      	lsls	r6, r3, #27
 8000d0a:	f100 80c0 	bmi.w	8000e8e <HAL_ADC_Init+0x1ce>
 8000d0e:	2800      	cmp	r0, #0
 8000d10:	f040 80bd 	bne.w	8000e8e <HAL_ADC_Init+0x1ce>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000d14:	6823      	ldr	r3, [r4, #0]
 8000d16:	6899      	ldr	r1, [r3, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8000d18:	f011 0104 	ands.w	r1, r1, #4
 8000d1c:	f040 80b7 	bne.w	8000e8e <HAL_ADC_Init+0x1ce>
    ADC_STATE_CLR_SET(hadc->State,
 8000d20:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000d22:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 8000d26:	f042 0202 	orr.w	r2, r2, #2
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000d2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 8000d2e:	6422      	str	r2, [r4, #64]	; 0x40
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000d30:	bf0c      	ite	eq
 8000d32:	4a5b      	ldreq	r2, [pc, #364]	; (8000ea0 <HAL_ADC_Init+0x1e0>)
 8000d34:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
 8000d38:	9202      	str	r2, [sp, #8]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000d3a:	689a      	ldr	r2, [r3, #8]
 8000d3c:	f002 0203 	and.w	r2, r2, #3
 8000d40:	2a01      	cmp	r2, #1
 8000d42:	d102      	bne.n	8000d4a <HAL_ADC_Init+0x8a>
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	07d5      	lsls	r5, r2, #31
 8000d48:	d410      	bmi.n	8000d6c <HAL_ADC_Init+0xac>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000d4a:	9a02      	ldr	r2, [sp, #8]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000d4c:	b13a      	cbz	r2, 8000d5e <HAL_ADC_Init+0x9e>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000d4e:	6895      	ldr	r5, [r2, #8]
 8000d50:	f005 0503 	and.w	r5, r5, #3
 8000d54:	2d01      	cmp	r5, #1
 8000d56:	d102      	bne.n	8000d5e <HAL_ADC_Init+0x9e>
 8000d58:	6812      	ldr	r2, [r2, #0]
 8000d5a:	07d2      	lsls	r2, r2, #31
 8000d5c:	d406      	bmi.n	8000d6c <HAL_ADC_Init+0xac>
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000d5e:	4d51      	ldr	r5, [pc, #324]	; (8000ea4 <HAL_ADC_Init+0x1e4>)
 8000d60:	6866      	ldr	r6, [r4, #4]
 8000d62:	68aa      	ldr	r2, [r5, #8]
 8000d64:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000d68:	4332      	orrs	r2, r6
 8000d6a:	60aa      	str	r2, [r5, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000d6c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000d6e:	68a6      	ldr	r6, [r4, #8]
 8000d70:	7e65      	ldrb	r5, [r4, #25]
 8000d72:	2a01      	cmp	r2, #1
 8000d74:	68e2      	ldr	r2, [r4, #12]
 8000d76:	ea42 0206 	orr.w	r2, r2, r6
 8000d7a:	bf18      	it	ne
 8000d7c:	f44f 5180 	movne.w	r1, #4096	; 0x1000
 8000d80:	ea42 3245 	orr.w	r2, r2, r5, lsl #13
 8000d84:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d86:	f894 1020 	ldrb.w	r1, [r4, #32]
 8000d8a:	2901      	cmp	r1, #1
 8000d8c:	d107      	bne.n	8000d9e <HAL_ADC_Init+0xde>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d8e:	2d00      	cmp	r5, #0
 8000d90:	d172      	bne.n	8000e78 <HAL_ADC_Init+0x1b8>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000d92:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000d94:	3901      	subs	r1, #1
 8000d96:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 8000d9a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d9e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000da0:	2901      	cmp	r1, #1
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000da2:	bf1e      	ittt	ne
 8000da4:	6ae5      	ldrne	r5, [r4, #44]	; 0x2c
 8000da6:	4329      	orrne	r1, r5
 8000da8:	430a      	orrne	r2, r1
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000daa:	6899      	ldr	r1, [r3, #8]
 8000dac:	f011 0f0c 	tst.w	r1, #12
 8000db0:	d10c      	bne.n	8000dcc <HAL_ADC_Init+0x10c>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000db2:	68d9      	ldr	r1, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000db4:	7e25      	ldrb	r5, [r4, #24]
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000db6:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8000dba:	f021 0102 	bic.w	r1, r1, #2
 8000dbe:	60d9      	str	r1, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000dc0:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8000dc4:	0049      	lsls	r1, r1, #1
 8000dc6:	ea41 3185 	orr.w	r1, r1, r5, lsl #14
 8000dca:	430a      	orrs	r2, r1
    MODIFY_REG(hadc->Instance->CFGR,
 8000dcc:	68dd      	ldr	r5, [r3, #12]
 8000dce:	4936      	ldr	r1, [pc, #216]	; (8000ea8 <HAL_ADC_Init+0x1e8>)
 8000dd0:	4029      	ands	r1, r5
 8000dd2:	430a      	orrs	r2, r1
 8000dd4:	60da      	str	r2, [r3, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000dd6:	6922      	ldr	r2, [r4, #16]
 8000dd8:	2a01      	cmp	r2, #1
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000dda:	bf05      	ittet	eq
 8000ddc:	6b19      	ldreq	r1, [r3, #48]	; 0x30
 8000dde:	69e2      	ldreq	r2, [r4, #28]
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000de0:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000de2:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8000de6:	bf06      	itte	eq
 8000de8:	f021 010f 	biceq.w	r1, r1, #15
 8000dec:	430a      	orreq	r2, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000dee:	f022 020f 	bicne.w	r2, r2, #15
 8000df2:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 8000df4:	2300      	movs	r3, #0
 8000df6:	6463      	str	r3, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8000df8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000dfa:	f023 0303 	bic.w	r3, r3, #3
 8000dfe:	f043 0301 	orr.w	r3, r3, #1
 8000e02:	6423      	str	r3, [r4, #64]	; 0x40
}
 8000e04:	b016      	add	sp, #88	; 0x58
 8000e06:	bd70      	pop	{r4, r5, r6, pc}
      ADC_CLEAR_ERRORCODE(hadc);
 8000e08:	6443      	str	r3, [r0, #68]	; 0x44
      hadc->InjectionConfig.ChannelCount = 0U;
 8000e0a:	64c3      	str	r3, [r0, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000e0c:	6483      	str	r3, [r0, #72]	; 0x48
      hadc->Lock = HAL_UNLOCKED;
 8000e0e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 8000e12:	f001 fca7 	bl	8002764 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000e16:	6823      	ldr	r3, [r4, #0]
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	00d8      	lsls	r0, r3, #3
 8000e1c:	f53f af60 	bmi.w	8000ce0 <HAL_ADC_Init+0x20>
        tmp_hal_status = ADC_Disable(hadc);
 8000e20:	4620      	mov	r0, r4
 8000e22:	f7ff feb8 	bl	8000b96 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e26:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000e28:	06d1      	lsls	r1, r2, #27
 8000e2a:	f53f af5a 	bmi.w	8000ce2 <HAL_ADC_Init+0x22>
 8000e2e:	2800      	cmp	r0, #0
 8000e30:	f47f af57 	bne.w	8000ce2 <HAL_ADC_Init+0x22>
          ADC_STATE_CLR_SET(hadc->State,
 8000e34:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e36:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e3a:	f023 0302 	bic.w	r3, r3, #2
 8000e3e:	f043 0302 	orr.w	r3, r3, #2
 8000e42:	6423      	str	r3, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000e44:	6823      	ldr	r3, [r4, #0]
 8000e46:	689a      	ldr	r2, [r3, #8]
 8000e48:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000e4c:	609a      	str	r2, [r3, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000e4e:	689a      	ldr	r2, [r3, #8]
 8000e50:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e54:	609a      	str	r2, [r3, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e56:	4b15      	ldr	r3, [pc, #84]	; (8000eac <HAL_ADC_Init+0x1ec>)
 8000e58:	4a15      	ldr	r2, [pc, #84]	; (8000eb0 <HAL_ADC_Init+0x1f0>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	fbb3 f2f2 	udiv	r2, r3, r2
 8000e60:	230a      	movs	r3, #10
 8000e62:	4353      	muls	r3, r2
            wait_loop_index--;
 8000e64:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000e66:	9b01      	ldr	r3, [sp, #4]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	f43f af39 	beq.w	8000ce0 <HAL_ADC_Init+0x20>
            wait_loop_index--;
 8000e6e:	9b01      	ldr	r3, [sp, #4]
 8000e70:	3b01      	subs	r3, #1
 8000e72:	e7f7      	b.n	8000e64 <HAL_ADC_Init+0x1a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e74:	4618      	mov	r0, r3
 8000e76:	e746      	b.n	8000d06 <HAL_ADC_Init+0x46>
        ADC_STATE_CLR_SET(hadc->State,
 8000e78:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000e7a:	f021 0122 	bic.w	r1, r1, #34	; 0x22
 8000e7e:	f041 0120 	orr.w	r1, r1, #32
 8000e82:	6421      	str	r1, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e84:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8000e86:	f041 0101 	orr.w	r1, r1, #1
 8000e8a:	6461      	str	r1, [r4, #68]	; 0x44
 8000e8c:	e787      	b.n	8000d9e <HAL_ADC_Init+0xde>
    ADC_STATE_CLR_SET(hadc->State,
 8000e8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e90:	f023 0312 	bic.w	r3, r3, #18
 8000e94:	f043 0310 	orr.w	r3, r3, #16
 8000e98:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	e7b2      	b.n	8000e04 <HAL_ADC_Init+0x144>
 8000e9e:	bf00      	nop
 8000ea0:	50000100 	.word	0x50000100
 8000ea4:	50000300 	.word	0x50000300
 8000ea8:	fff0c007 	.word	0xfff0c007
 8000eac:	20000008 	.word	0x20000008
 8000eb0:	000f4240 	.word	0x000f4240

08000eb4 <HAL_ADC_Start_IT>:
{
 8000eb4:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000eb6:	6803      	ldr	r3, [r0, #0]
 8000eb8:	689d      	ldr	r5, [r3, #8]
 8000eba:	f015 0504 	ands.w	r5, r5, #4
{
 8000ebe:	4604      	mov	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000ec0:	d16d      	bne.n	8000f9e <HAL_ADC_Start_IT+0xea>
    __HAL_LOCK(hadc);
 8000ec2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d069      	beq.n	8000f9e <HAL_ADC_Start_IT+0xea>
 8000eca:	2301      	movs	r3, #1
 8000ecc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    tmp_hal_status = ADC_Enable(hadc);
 8000ed0:	f7ff fe98 	bl	8000c04 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8000ed4:	2800      	cmp	r0, #0
 8000ed6:	d15f      	bne.n	8000f98 <HAL_ADC_Start_IT+0xe4>
      ADC_STATE_CLR_SET(hadc->State,
 8000ed8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000eda:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000ede:	f023 0301 	bic.w	r3, r3, #1
 8000ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee6:	6423      	str	r3, [r4, #64]	; 0x40
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000ee8:	4b2e      	ldr	r3, [pc, #184]	; (8000fa4 <HAL_ADC_Start_IT+0xf0>)
 8000eea:	689b      	ldr	r3, [r3, #8]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000eec:	6c22      	ldr	r2, [r4, #64]	; 0x40
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000eee:	f013 0f1f 	tst.w	r3, #31
 8000ef2:	6823      	ldr	r3, [r4, #0]
 8000ef4:	d002      	beq.n	8000efc <HAL_ADC_Start_IT+0x48>
 8000ef6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000efa:	d143      	bne.n	8000f84 <HAL_ADC_Start_IT+0xd0>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000efc:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8000f00:	6422      	str	r2, [r4, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000f02:	68da      	ldr	r2, [r3, #12]
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000f04:	0195      	lsls	r5, r2, #6
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f06:	bf41      	itttt	mi
 8000f08:	6c22      	ldrmi	r2, [r4, #64]	; 0x40
 8000f0a:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8000f0e:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8000f12:	6422      	strmi	r2, [r4, #64]	; 0x40
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f14:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000f16:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f1a:	bf1c      	itt	ne
 8000f1c:	6c62      	ldrne	r2, [r4, #68]	; 0x44
 8000f1e:	f022 0206 	bicne.w	r2, r2, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8000f22:	6462      	str	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 8000f24:	2200      	movs	r2, #0
 8000f26:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000f2a:	221c      	movs	r2, #28
 8000f2c:	601a      	str	r2, [r3, #0]
      switch(hadc->Init.EOCSelection)
 8000f2e:	6962      	ldr	r2, [r4, #20]
 8000f30:	2a08      	cmp	r2, #8
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000f32:	685a      	ldr	r2, [r3, #4]
 8000f34:	bf03      	ittte	eq
 8000f36:	f022 0204 	biceq.w	r2, r2, #4
 8000f3a:	605a      	streq	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8000f3c:	685a      	ldreq	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 8000f3e:	f042 020c 	orrne.w	r2, r2, #12
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8000f42:	bf08      	it	eq
 8000f44:	f042 0208 	orreq.w	r2, r2, #8
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 8000f48:	605a      	str	r2, [r3, #4]
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8000f4a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000f4c:	2a01      	cmp	r2, #1
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8000f4e:	bf02      	ittt	eq
 8000f50:	685a      	ldreq	r2, [r3, #4]
 8000f52:	f022 0210 	biceq.w	r2, r2, #16
 8000f56:	605a      	streq	r2, [r3, #4]
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8000f58:	4a12      	ldr	r2, [pc, #72]	; (8000fa4 <HAL_ADC_Start_IT+0xf0>)
 8000f5a:	6891      	ldr	r1, [r2, #8]
 8000f5c:	06c9      	lsls	r1, r1, #27
 8000f5e:	d00c      	beq.n	8000f7a <HAL_ADC_Start_IT+0xc6>
 8000f60:	6891      	ldr	r1, [r2, #8]
 8000f62:	f001 011f 	and.w	r1, r1, #31
 8000f66:	2905      	cmp	r1, #5
 8000f68:	d007      	beq.n	8000f7a <HAL_ADC_Start_IT+0xc6>
 8000f6a:	6892      	ldr	r2, [r2, #8]
 8000f6c:	f002 021f 	and.w	r2, r2, #31
 8000f70:	2a09      	cmp	r2, #9
 8000f72:	d002      	beq.n	8000f7a <HAL_ADC_Start_IT+0xc6>
 8000f74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f78:	d112      	bne.n	8000fa0 <HAL_ADC_Start_IT+0xec>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000f7a:	689a      	ldr	r2, [r3, #8]
 8000f7c:	f042 0204 	orr.w	r2, r2, #4
 8000f80:	609a      	str	r2, [r3, #8]
 8000f82:	bd38      	pop	{r3, r4, r5, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f84:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000f88:	6422      	str	r2, [r4, #64]	; 0x40
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000f8a:	4a07      	ldr	r2, [pc, #28]	; (8000fa8 <HAL_ADC_Start_IT+0xf4>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d1c1      	bne.n	8000f14 <HAL_ADC_Start_IT+0x60>
 8000f90:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f94:	68d2      	ldr	r2, [r2, #12]
 8000f96:	e7b5      	b.n	8000f04 <HAL_ADC_Start_IT+0x50>
      __HAL_UNLOCK(hadc);
 8000f98:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
 8000f9c:	bd38      	pop	{r3, r4, r5, pc}
    tmp_hal_status = HAL_BUSY;
 8000f9e:	2002      	movs	r0, #2
}
 8000fa0:	bd38      	pop	{r3, r4, r5, pc}
 8000fa2:	bf00      	nop
 8000fa4:	50000300 	.word	0x50000300
 8000fa8:	50000100 	.word	0x50000100

08000fac <HAL_ADC_Start_DMA>:
{
 8000fac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000fb0:	6803      	ldr	r3, [r0, #0]
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	f013 0304 	ands.w	r3, r3, #4
{
 8000fb8:	4604      	mov	r4, r0
 8000fba:	460f      	mov	r7, r1
 8000fbc:	4690      	mov	r8, r2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000fbe:	d171      	bne.n	80010a4 <HAL_ADC_Start_DMA+0xf8>
    __HAL_LOCK(hadc);
 8000fc0:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8000fc4:	2a01      	cmp	r2, #1
 8000fc6:	d06d      	beq.n	80010a4 <HAL_ADC_Start_DMA+0xf8>
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8000fc8:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 80010b8 <HAL_ADC_Start_DMA+0x10c>
 8000fcc:	f8d9 5008 	ldr.w	r5, [r9, #8]
    __HAL_LOCK(hadc);
 8000fd0:	2601      	movs	r6, #1
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8000fd2:	f015 051f 	ands.w	r5, r5, #31
    __HAL_LOCK(hadc);
 8000fd6:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8000fda:	d160      	bne.n	800109e <HAL_ADC_Start_DMA+0xf2>
      tmp_hal_status = ADC_Enable(hadc);
 8000fdc:	f7ff fe12 	bl	8000c04 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	2800      	cmp	r0, #0
 8000fe4:	d158      	bne.n	8001098 <HAL_ADC_Start_DMA+0xec>
        ADC_STATE_CLR_SET(hadc->State,
 8000fe6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8000fe8:	6821      	ldr	r1, [r4, #0]
 8000fea:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
 8000fee:	f020 0001 	bic.w	r0, r0, #1
 8000ff2:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8000ff6:	6420      	str	r0, [r4, #64]	; 0x40
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000ff8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8000ffc:	f013 0f1f 	tst.w	r3, #31
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001000:	6c23      	ldr	r3, [r4, #64]	; 0x40
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001002:	d002      	beq.n	800100a <HAL_ADC_Start_DMA+0x5e>
 8001004:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8001008:	d134      	bne.n	8001074 <HAL_ADC_Start_DMA+0xc8>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800100a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800100e:	6423      	str	r3, [r4, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001010:	68cb      	ldr	r3, [r1, #12]
 8001012:	019a      	lsls	r2, r3, #6
 8001014:	d505      	bpl.n	8001022 <HAL_ADC_Start_DMA+0x76>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001016:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001018:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800101c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001020:	6423      	str	r3, [r4, #64]	; 0x40
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001022:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001024:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001026:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800102a:	bf1c      	itt	ne
 800102c:	6c63      	ldrne	r3, [r4, #68]	; 0x44
 800102e:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 8001032:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 8001034:	2300      	movs	r3, #0
 8001036:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800103a:	4b1b      	ldr	r3, [pc, #108]	; (80010a8 <HAL_ADC_Start_DMA+0xfc>)
 800103c:	6283      	str	r3, [r0, #40]	; 0x28
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800103e:	4b1b      	ldr	r3, [pc, #108]	; (80010ac <HAL_ADC_Start_DMA+0x100>)
 8001040:	62c3      	str	r3, [r0, #44]	; 0x2c
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001042:	4b1b      	ldr	r3, [pc, #108]	; (80010b0 <HAL_ADC_Start_DMA+0x104>)
 8001044:	6303      	str	r3, [r0, #48]	; 0x30
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001046:	231c      	movs	r3, #28
 8001048:	600b      	str	r3, [r1, #0]
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800104a:	684b      	ldr	r3, [r1, #4]
 800104c:	f043 0310 	orr.w	r3, r3, #16
 8001050:	604b      	str	r3, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001052:	68cb      	ldr	r3, [r1, #12]
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	60cb      	str	r3, [r1, #12]
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800105a:	463a      	mov	r2, r7
 800105c:	4643      	mov	r3, r8
 800105e:	3140      	adds	r1, #64	; 0x40
 8001060:	f000 fc3c 	bl	80018dc <HAL_DMA_Start_IT>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001064:	6822      	ldr	r2, [r4, #0]
 8001066:	6893      	ldr	r3, [r2, #8]
 8001068:	f043 0304 	orr.w	r3, r3, #4
 800106c:	6093      	str	r3, [r2, #8]
}
 800106e:	4630      	mov	r0, r6
 8001070:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001074:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001078:	6423      	str	r3, [r4, #64]	; 0x40
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800107a:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <HAL_ADC_Start_DMA+0x108>)
 800107c:	4299      	cmp	r1, r3
 800107e:	d1d0      	bne.n	8001022 <HAL_ADC_Start_DMA+0x76>
 8001080:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001084:	68db      	ldr	r3, [r3, #12]
 8001086:	019b      	lsls	r3, r3, #6
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001088:	bf41      	itttt	mi
 800108a:	6c20      	ldrmi	r0, [r4, #64]	; 0x40
 800108c:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 8001090:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 8001094:	6420      	strmi	r0, [r4, #64]	; 0x40
 8001096:	e7c4      	b.n	8001022 <HAL_ADC_Start_DMA+0x76>
        __HAL_UNLOCK(hadc);
 8001098:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
 800109c:	e7e7      	b.n	800106e <HAL_ADC_Start_DMA+0xc2>
      __HAL_UNLOCK(hadc);
 800109e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 80010a2:	e7e4      	b.n	800106e <HAL_ADC_Start_DMA+0xc2>
    tmp_hal_status = HAL_BUSY;
 80010a4:	2602      	movs	r6, #2
 80010a6:	e7e2      	b.n	800106e <HAL_ADC_Start_DMA+0xc2>
 80010a8:	08000c7d 	.word	0x08000c7d
 80010ac:	08000c77 	.word	0x08000c77
 80010b0:	08000c61 	.word	0x08000c61
 80010b4:	50000100 	.word	0x50000100
 80010b8:	50000300 	.word	0x50000300

080010bc <HAL_ADC_ConfigChannel>:
{
 80010bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010be:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 80010c0:	2300      	movs	r3, #0
 80010c2:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80010c4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80010c8:	2b01      	cmp	r3, #1
{
 80010ca:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 80010cc:	f000 8151 	beq.w	8001372 <HAL_ADC_ConfigChannel+0x2b6>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010d0:	682b      	ldr	r3, [r5, #0]
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80010d2:	68ce      	ldr	r6, [r1, #12]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010d4:	689a      	ldr	r2, [r3, #8]
  __HAL_LOCK(hadc);
 80010d6:	2001      	movs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010d8:	0754      	lsls	r4, r2, #29
  __HAL_LOCK(hadc);
 80010da:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010de:	f100 8143 	bmi.w	8001368 <HAL_ADC_ConfigChannel+0x2ac>
    if (sConfig->Rank < 5U)
 80010e2:	6848      	ldr	r0, [r1, #4]
 80010e4:	680c      	ldr	r4, [r1, #0]
 80010e6:	2804      	cmp	r0, #4
 80010e8:	f04f 0206 	mov.w	r2, #6
 80010ec:	d831      	bhi.n	8001152 <HAL_ADC_ConfigChannel+0x96>
      MODIFY_REG(hadc->Instance->SQR1,
 80010ee:	4342      	muls	r2, r0
 80010f0:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 80010f2:	201f      	movs	r0, #31
 80010f4:	4090      	lsls	r0, r2
 80010f6:	ea27 0000 	bic.w	r0, r7, r0
 80010fa:	fa04 f202 	lsl.w	r2, r4, r2
 80010fe:	4302      	orrs	r2, r0
 8001100:	631a      	str	r2, [r3, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001102:	689a      	ldr	r2, [r3, #8]
 8001104:	f012 0f0c 	tst.w	r2, #12
 8001108:	d162      	bne.n	80011d0 <HAL_ADC_ConfigChannel+0x114>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800110a:	2c09      	cmp	r4, #9
 800110c:	ea4f 0244 	mov.w	r2, r4, lsl #1
 8001110:	688f      	ldr	r7, [r1, #8]
 8001112:	d946      	bls.n	80011a2 <HAL_ADC_ConfigChannel+0xe6>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001114:	4422      	add	r2, r4
 8001116:	6998      	ldr	r0, [r3, #24]
 8001118:	3a1e      	subs	r2, #30
 800111a:	f04f 0e07 	mov.w	lr, #7
 800111e:	fa0e fe02 	lsl.w	lr, lr, r2
 8001122:	ea20 000e 	bic.w	r0, r0, lr
 8001126:	fa07 f202 	lsl.w	r2, r7, r2
 800112a:	4302      	orrs	r2, r0
 800112c:	619a      	str	r2, [r3, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800112e:	68da      	ldr	r2, [r3, #12]
 8001130:	f3c2 0ec1 	ubfx	lr, r2, #3, #2
 8001134:	694a      	ldr	r2, [r1, #20]
 8001136:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800113a:	fa02 fe0e 	lsl.w	lr, r2, lr
    switch (sConfig->OffsetNumber)
 800113e:	690a      	ldr	r2, [r1, #16]
 8001140:	3a01      	subs	r2, #1
 8001142:	ea4f 6c84 	mov.w	ip, r4, lsl #26
 8001146:	2a03      	cmp	r2, #3
 8001148:	d873      	bhi.n	8001232 <HAL_ADC_ConfigChannel+0x176>
 800114a:	e8df f002 	tbb	[pc, r2]
 800114e:	5137      	.short	0x5137
 8001150:	675c      	.short	0x675c
    else if (sConfig->Rank < 10U)
 8001152:	2809      	cmp	r0, #9
 8001154:	d80b      	bhi.n	800116e <HAL_ADC_ConfigChannel+0xb2>
      MODIFY_REG(hadc->Instance->SQR2,
 8001156:	4342      	muls	r2, r0
 8001158:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800115a:	3a1e      	subs	r2, #30
 800115c:	201f      	movs	r0, #31
 800115e:	4090      	lsls	r0, r2
 8001160:	ea27 0000 	bic.w	r0, r7, r0
 8001164:	fa04 f202 	lsl.w	r2, r4, r2
 8001168:	4302      	orrs	r2, r0
 800116a:	635a      	str	r2, [r3, #52]	; 0x34
 800116c:	e7c9      	b.n	8001102 <HAL_ADC_ConfigChannel+0x46>
    else if (sConfig->Rank < 15U)
 800116e:	280e      	cmp	r0, #14
 8001170:	d80b      	bhi.n	800118a <HAL_ADC_ConfigChannel+0xce>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001172:	4342      	muls	r2, r0
 8001174:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8001176:	3a3c      	subs	r2, #60	; 0x3c
 8001178:	201f      	movs	r0, #31
 800117a:	4090      	lsls	r0, r2
 800117c:	ea27 0000 	bic.w	r0, r7, r0
 8001180:	fa04 f202 	lsl.w	r2, r4, r2
 8001184:	4302      	orrs	r2, r0
 8001186:	639a      	str	r2, [r3, #56]	; 0x38
 8001188:	e7bb      	b.n	8001102 <HAL_ADC_ConfigChannel+0x46>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800118a:	4342      	muls	r2, r0
 800118c:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 800118e:	3a5a      	subs	r2, #90	; 0x5a
 8001190:	201f      	movs	r0, #31
 8001192:	4090      	lsls	r0, r2
 8001194:	ea27 0000 	bic.w	r0, r7, r0
 8001198:	fa04 f202 	lsl.w	r2, r4, r2
 800119c:	4302      	orrs	r2, r0
 800119e:	63da      	str	r2, [r3, #60]	; 0x3c
 80011a0:	e7af      	b.n	8001102 <HAL_ADC_ConfigChannel+0x46>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80011a2:	6958      	ldr	r0, [r3, #20]
 80011a4:	4422      	add	r2, r4
 80011a6:	f04f 0e07 	mov.w	lr, #7
 80011aa:	fa0e fe02 	lsl.w	lr, lr, r2
 80011ae:	ea20 000e 	bic.w	r0, r0, lr
 80011b2:	fa07 f202 	lsl.w	r2, r7, r2
 80011b6:	4302      	orrs	r2, r0
 80011b8:	615a      	str	r2, [r3, #20]
 80011ba:	e7b8      	b.n	800112e <HAL_ADC_ConfigChannel+0x72>
      MODIFY_REG(hadc->Instance->OFR1               ,
 80011bc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80011be:	4f7a      	ldr	r7, [pc, #488]	; (80013a8 <HAL_ADC_ConfigChannel+0x2ec>)
 80011c0:	4017      	ands	r7, r2
 80011c2:	ea47 020c 	orr.w	r2, r7, ip
 80011c6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80011ca:	ea42 020e 	orr.w	r2, r2, lr
 80011ce:	661a      	str	r2, [r3, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 80011d0:	689a      	ldr	r2, [r3, #8]
 80011d2:	f002 0203 	and.w	r2, r2, #3
 80011d6:	2a01      	cmp	r2, #1
 80011d8:	f040 80cd 	bne.w	8001376 <HAL_ADC_ConfigChannel+0x2ba>
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	07d0      	lsls	r0, r2, #31
 80011e0:	f140 80c9 	bpl.w	8001376 <HAL_ADC_ConfigChannel+0x2ba>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011e4:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 80011e6:	2300      	movs	r3, #0
 80011e8:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 80011ec:	b017      	add	sp, #92	; 0x5c
 80011ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->OFR2               ,
 80011f0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80011f2:	4f6d      	ldr	r7, [pc, #436]	; (80013a8 <HAL_ADC_ConfigChannel+0x2ec>)
 80011f4:	4017      	ands	r7, r2
 80011f6:	ea47 020c 	orr.w	r2, r7, ip
 80011fa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80011fe:	ea42 020e 	orr.w	r2, r2, lr
 8001202:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 8001204:	e7e4      	b.n	80011d0 <HAL_ADC_ConfigChannel+0x114>
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001206:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001208:	4867      	ldr	r0, [pc, #412]	; (80013a8 <HAL_ADC_ConfigChannel+0x2ec>)
 800120a:	4010      	ands	r0, r2
 800120c:	ea40 020c 	orr.w	r2, r0, ip
 8001210:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001214:	ea42 020e 	orr.w	r2, r2, lr
 8001218:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 800121a:	e7d9      	b.n	80011d0 <HAL_ADC_ConfigChannel+0x114>
      MODIFY_REG(hadc->Instance->OFR4               ,
 800121c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800121e:	4a62      	ldr	r2, [pc, #392]	; (80013a8 <HAL_ADC_ConfigChannel+0x2ec>)
 8001220:	4002      	ands	r2, r0
 8001222:	ea42 020c 	orr.w	r2, r2, ip
 8001226:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800122a:	ea42 020e 	orr.w	r2, r2, lr
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800122e:	66da      	str	r2, [r3, #108]	; 0x6c
 8001230:	e7ce      	b.n	80011d0 <HAL_ADC_ConfigChannel+0x114>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001232:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001234:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8001238:	4562      	cmp	r2, ip
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800123a:	bf02      	ittt	eq
 800123c:	6e1a      	ldreq	r2, [r3, #96]	; 0x60
 800123e:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8001242:	661a      	streq	r2, [r3, #96]	; 0x60
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001244:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001246:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800124a:	4594      	cmp	ip, r2
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800124c:	bf02      	ittt	eq
 800124e:	6e5a      	ldreq	r2, [r3, #100]	; 0x64
 8001250:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8001254:	665a      	streq	r2, [r3, #100]	; 0x64
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001256:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001258:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800125c:	4594      	cmp	ip, r2
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800125e:	bf02      	ittt	eq
 8001260:	6e9a      	ldreq	r2, [r3, #104]	; 0x68
 8001262:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8001266:	669a      	streq	r2, [r3, #104]	; 0x68
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001268:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800126a:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800126e:	4594      	cmp	ip, r2
 8001270:	d1ae      	bne.n	80011d0 <HAL_ADC_ConfigChannel+0x114>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001272:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001274:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001278:	e7d9      	b.n	800122e <HAL_ADC_ConfigChannel+0x172>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800127a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800127e:	2101      	movs	r1, #1
 8001280:	40a1      	lsls	r1, r4
 8001282:	ea22 0201 	bic.w	r2, r2, r1
 8001286:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800128a:	2c10      	cmp	r4, #16
 800128c:	d143      	bne.n	8001316 <HAL_ADC_ConfigChannel+0x25a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800128e:	4a47      	ldr	r2, [pc, #284]	; (80013ac <HAL_ADC_ConfigChannel+0x2f0>)
 8001290:	6892      	ldr	r2, [r2, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001292:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001296:	d1a5      	bne.n	80011e4 <HAL_ADC_ConfigChannel+0x128>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001298:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800129c:	bf0c      	ite	eq
 800129e:	4a44      	ldreq	r2, [pc, #272]	; (80013b0 <HAL_ADC_ConfigChannel+0x2f4>)
 80012a0:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
 80012a4:	9202      	str	r2, [sp, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80012a6:	689a      	ldr	r2, [r3, #8]
 80012a8:	f002 0203 	and.w	r2, r2, #3
 80012ac:	2a01      	cmp	r2, #1
 80012ae:	d102      	bne.n	80012b6 <HAL_ADC_ConfigChannel+0x1fa>
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	07d1      	lsls	r1, r2, #31
 80012b4:	d452      	bmi.n	800135c <HAL_ADC_ConfigChannel+0x2a0>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80012b6:	9a02      	ldr	r2, [sp, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80012b8:	b13a      	cbz	r2, 80012ca <HAL_ADC_ConfigChannel+0x20e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80012ba:	6891      	ldr	r1, [r2, #8]
 80012bc:	f001 0103 	and.w	r1, r1, #3
 80012c0:	2901      	cmp	r1, #1
 80012c2:	d102      	bne.n	80012ca <HAL_ADC_ConfigChannel+0x20e>
 80012c4:	6812      	ldr	r2, [r2, #0]
 80012c6:	07d2      	lsls	r2, r2, #31
 80012c8:	d448      	bmi.n	800135c <HAL_ADC_ConfigChannel+0x2a0>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80012ca:	2c10      	cmp	r4, #16
 80012cc:	d132      	bne.n	8001334 <HAL_ADC_ConfigChannel+0x278>
 80012ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012d2:	d187      	bne.n	80011e4 <HAL_ADC_ConfigChannel+0x128>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80012d4:	4a35      	ldr	r2, [pc, #212]	; (80013ac <HAL_ADC_ConfigChannel+0x2f0>)
 80012d6:	6893      	ldr	r3, [r2, #8]
 80012d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80012dc:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012de:	4b35      	ldr	r3, [pc, #212]	; (80013b4 <HAL_ADC_ConfigChannel+0x2f8>)
 80012e0:	4a35      	ldr	r2, [pc, #212]	; (80013b8 <HAL_ADC_ConfigChannel+0x2fc>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	fbb3 f2f2 	udiv	r2, r3, r2
 80012e8:	230a      	movs	r3, #10
 80012ea:	4353      	muls	r3, r2
            wait_loop_index--;
 80012ec:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80012ee:	9b01      	ldr	r3, [sp, #4]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	f43f af77 	beq.w	80011e4 <HAL_ADC_ConfigChannel+0x128>
            wait_loop_index--;
 80012f6:	9b01      	ldr	r3, [sp, #4]
 80012f8:	3b01      	subs	r3, #1
 80012fa:	e7f7      	b.n	80012ec <HAL_ADC_ConfigChannel+0x230>
        MODIFY_REG(hadc->Instance->SMPR1,
 80012fc:	1c60      	adds	r0, r4, #1
 80012fe:	6959      	ldr	r1, [r3, #20]
 8001300:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001304:	2207      	movs	r2, #7
 8001306:	4082      	lsls	r2, r0
 8001308:	ea21 0102 	bic.w	r1, r1, r2
 800130c:	fa06 f200 	lsl.w	r2, r6, r0
 8001310:	430a      	orrs	r2, r1
 8001312:	615a      	str	r2, [r3, #20]
 8001314:	e7b9      	b.n	800128a <HAL_ADC_ConfigChannel+0x1ce>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001316:	2c11      	cmp	r4, #17
 8001318:	d104      	bne.n	8001324 <HAL_ADC_ConfigChannel+0x268>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800131a:	4a24      	ldr	r2, [pc, #144]	; (80013ac <HAL_ADC_ConfigChannel+0x2f0>)
 800131c:	6892      	ldr	r2, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800131e:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8001322:	e7b8      	b.n	8001296 <HAL_ADC_ConfigChannel+0x1da>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001324:	2c12      	cmp	r4, #18
 8001326:	f47f af5d 	bne.w	80011e4 <HAL_ADC_ConfigChannel+0x128>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800132a:	4a20      	ldr	r2, [pc, #128]	; (80013ac <HAL_ADC_ConfigChannel+0x2f0>)
 800132c:	6892      	ldr	r2, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800132e:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8001332:	e7b0      	b.n	8001296 <HAL_ADC_ConfigChannel+0x1da>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001334:	2c11      	cmp	r4, #17
 8001336:	d109      	bne.n	800134c <HAL_ADC_ConfigChannel+0x290>
 8001338:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800133c:	f47f af52 	bne.w	80011e4 <HAL_ADC_ConfigChannel+0x128>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001340:	4a1a      	ldr	r2, [pc, #104]	; (80013ac <HAL_ADC_ConfigChannel+0x2f0>)
 8001342:	6893      	ldr	r3, [r2, #8]
 8001344:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001348:	6093      	str	r3, [r2, #8]
 800134a:	e74b      	b.n	80011e4 <HAL_ADC_ConfigChannel+0x128>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800134c:	2c12      	cmp	r4, #18
 800134e:	f47f af49 	bne.w	80011e4 <HAL_ADC_ConfigChannel+0x128>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001352:	4a16      	ldr	r2, [pc, #88]	; (80013ac <HAL_ADC_ConfigChannel+0x2f0>)
 8001354:	6893      	ldr	r3, [r2, #8]
 8001356:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800135a:	e7f5      	b.n	8001348 <HAL_ADC_ConfigChannel+0x28c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800135c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800135e:	f043 0320 	orr.w	r3, r3, #32
 8001362:	642b      	str	r3, [r5, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 8001364:	2001      	movs	r0, #1
 8001366:	e73e      	b.n	80011e6 <HAL_ADC_ConfigChannel+0x12a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001368:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800136a:	f043 0320 	orr.w	r3, r3, #32
 800136e:	642b      	str	r3, [r5, #64]	; 0x40
 8001370:	e739      	b.n	80011e6 <HAL_ADC_ConfigChannel+0x12a>
  __HAL_LOCK(hadc);
 8001372:	2002      	movs	r0, #2
 8001374:	e73a      	b.n	80011ec <HAL_ADC_ConfigChannel+0x130>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001376:	2e01      	cmp	r6, #1
 8001378:	f47f af7f 	bne.w	800127a <HAL_ADC_ConfigChannel+0x1be>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800137c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001380:	40a6      	lsls	r6, r4
 8001382:	4316      	orrs	r6, r2
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001384:	2c09      	cmp	r4, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001386:	f8c3 60b0 	str.w	r6, [r3, #176]	; 0xb0
 800138a:	688e      	ldr	r6, [r1, #8]
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800138c:	d9b6      	bls.n	80012fc <HAL_ADC_ConfigChannel+0x240>
        MODIFY_REG(hadc->Instance->SMPR2,
 800138e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8001392:	6999      	ldr	r1, [r3, #24]
 8001394:	3a1b      	subs	r2, #27
 8001396:	2007      	movs	r0, #7
 8001398:	4090      	lsls	r0, r2
 800139a:	ea21 0100 	bic.w	r1, r1, r0
 800139e:	fa06 f202 	lsl.w	r2, r6, r2
 80013a2:	430a      	orrs	r2, r1
 80013a4:	619a      	str	r2, [r3, #24]
 80013a6:	e770      	b.n	800128a <HAL_ADC_ConfigChannel+0x1ce>
 80013a8:	83fff000 	.word	0x83fff000
 80013ac:	50000300 	.word	0x50000300
 80013b0:	50000100 	.word	0x50000100
 80013b4:	20000008 	.word	0x20000008
 80013b8:	000f4240 	.word	0x000f4240

080013bc <HAL_ADCEx_MultiModeConfigChannel>:
{
 80013bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80013be:	6805      	ldr	r5, [r0, #0]
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80013c0:	680c      	ldr	r4, [r1, #0]
{
 80013c2:	b095      	sub	sp, #84	; 0x54
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80013c4:	f1b5 4fa0 	cmp.w	r5, #1342177280	; 0x50000000
 80013c8:	bf0c      	ite	eq
 80013ca:	4a32      	ldreq	r2, [pc, #200]	; (8001494 <HAL_ADCEx_MultiModeConfigChannel+0xd8>)
 80013cc:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
 80013d0:	9200      	str	r2, [sp, #0]
{
 80013d2:	4603      	mov	r3, r0
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80013d4:	9800      	ldr	r0, [sp, #0]
 80013d6:	2800      	cmp	r0, #0
 80013d8:	d045      	beq.n	8001466 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
  __HAL_LOCK(hadc);
 80013da:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 80013de:	2a01      	cmp	r2, #1
 80013e0:	d043      	beq.n	800146a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80013e2:	2201      	movs	r2, #1
 80013e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80013e8:	68aa      	ldr	r2, [r5, #8]
 80013ea:	0757      	lsls	r7, r2, #29
 80013ec:	d431      	bmi.n	8001452 <HAL_ADCEx_MultiModeConfigChannel+0x96>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80013ee:	6882      	ldr	r2, [r0, #8]
 80013f0:	0756      	lsls	r6, r2, #29
 80013f2:	d42e      	bmi.n	8001452 <HAL_ADCEx_MultiModeConfigChannel+0x96>
 80013f4:	4e28      	ldr	r6, [pc, #160]	; (8001498 <HAL_ADCEx_MultiModeConfigChannel+0xdc>)
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80013f6:	68b2      	ldr	r2, [r6, #8]
 80013f8:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80013fc:	b184      	cbz	r4, 8001420 <HAL_ADCEx_MultiModeConfigChannel+0x64>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80013fe:	684f      	ldr	r7, [r1, #4]
 8001400:	433a      	orrs	r2, r7
 8001402:	f893 7030 	ldrb.w	r7, [r3, #48]	; 0x30
 8001406:	ea42 3247 	orr.w	r2, r2, r7, lsl #13
 800140a:	60b2      	str	r2, [r6, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800140c:	68aa      	ldr	r2, [r5, #8]
 800140e:	f002 0203 	and.w	r2, r2, #3
 8001412:	2a01      	cmp	r2, #1
 8001414:	d12b      	bne.n	800146e <HAL_ADCEx_MultiModeConfigChannel+0xb2>
 8001416:	682a      	ldr	r2, [r5, #0]
 8001418:	07d5      	lsls	r5, r2, #31
 800141a:	d528      	bpl.n	800146e <HAL_ADCEx_MultiModeConfigChannel+0xb2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800141c:	2000      	movs	r0, #0
 800141e:	e01d      	b.n	800145c <HAL_ADCEx_MultiModeConfigChannel+0xa0>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001420:	60b2      	str	r2, [r6, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001422:	68aa      	ldr	r2, [r5, #8]
 8001424:	f002 0203 	and.w	r2, r2, #3
 8001428:	2a01      	cmp	r2, #1
 800142a:	d102      	bne.n	8001432 <HAL_ADCEx_MultiModeConfigChannel+0x76>
 800142c:	682a      	ldr	r2, [r5, #0]
 800142e:	07d1      	lsls	r1, r2, #31
 8001430:	d4f4      	bmi.n	800141c <HAL_ADCEx_MultiModeConfigChannel+0x60>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001432:	6882      	ldr	r2, [r0, #8]
 8001434:	f002 0203 	and.w	r2, r2, #3
 8001438:	2a01      	cmp	r2, #1
 800143a:	d102      	bne.n	8001442 <HAL_ADCEx_MultiModeConfigChannel+0x86>
 800143c:	6802      	ldr	r2, [r0, #0]
 800143e:	07d2      	lsls	r2, r2, #31
 8001440:	d4ec      	bmi.n	800141c <HAL_ADCEx_MultiModeConfigChannel+0x60>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001442:	4915      	ldr	r1, [pc, #84]	; (8001498 <HAL_ADCEx_MultiModeConfigChannel+0xdc>)
 8001444:	688a      	ldr	r2, [r1, #8]
 8001446:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 800144a:	f022 020f 	bic.w	r2, r2, #15
 800144e:	608a      	str	r2, [r1, #8]
 8001450:	e7e4      	b.n	800141c <HAL_ADCEx_MultiModeConfigChannel+0x60>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001452:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001454:	f042 0220 	orr.w	r2, r2, #32
 8001458:	641a      	str	r2, [r3, #64]	; 0x40
    tmp_hal_status = HAL_ERROR;
 800145a:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 800145c:	2200      	movs	r2, #0
 800145e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
} 
 8001462:	b015      	add	sp, #84	; 0x54
 8001464:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8001466:	2001      	movs	r0, #1
 8001468:	e7fb      	b.n	8001462 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
  __HAL_LOCK(hadc);
 800146a:	2002      	movs	r0, #2
 800146c:	e7f9      	b.n	8001462 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800146e:	6882      	ldr	r2, [r0, #8]
 8001470:	f002 0203 	and.w	r2, r2, #3
 8001474:	2a01      	cmp	r2, #1
 8001476:	d102      	bne.n	800147e <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 8001478:	6802      	ldr	r2, [r0, #0]
 800147a:	07d0      	lsls	r0, r2, #31
 800147c:	d4ce      	bmi.n	800141c <HAL_ADCEx_MultiModeConfigChannel+0x60>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800147e:	4806      	ldr	r0, [pc, #24]	; (8001498 <HAL_ADCEx_MultiModeConfigChannel+0xdc>)
 8001480:	6889      	ldr	r1, [r1, #8]
 8001482:	6882      	ldr	r2, [r0, #8]
 8001484:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8001488:	430c      	orrs	r4, r1
 800148a:	f022 020f 	bic.w	r2, r2, #15
 800148e:	4314      	orrs	r4, r2
 8001490:	6084      	str	r4, [r0, #8]
 8001492:	e7c3      	b.n	800141c <HAL_ADCEx_MultiModeConfigChannel+0x60>
 8001494:	50000100 	.word	0x50000100
 8001498:	50000300 	.word	0x50000300

0800149c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800149c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800149e:	4604      	mov	r4, r0
 80014a0:	2800      	cmp	r0, #0
 80014a2:	d06e      	beq.n	8001582 <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80014a4:	f890 3020 	ldrb.w	r3, [r0, #32]
 80014a8:	b90b      	cbnz	r3, 80014ae <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80014aa:	f001 f9db 	bl	8002864 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80014ae:	6822      	ldr	r2, [r4, #0]
 80014b0:	6813      	ldr	r3, [r2, #0]
 80014b2:	f023 0302 	bic.w	r3, r3, #2
 80014b6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014b8:	f7ff fb50 	bl	8000b5c <HAL_GetTick>
 80014bc:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80014be:	6823      	ldr	r3, [r4, #0]
 80014c0:	685a      	ldr	r2, [r3, #4]
 80014c2:	0791      	lsls	r1, r2, #30
 80014c4:	d451      	bmi.n	800156a <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	f042 0201 	orr.w	r2, r2, #1
 80014cc:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014ce:	f7ff fb45 	bl	8000b5c <HAL_GetTick>
 80014d2:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80014d4:	6823      	ldr	r3, [r4, #0]
 80014d6:	685a      	ldr	r2, [r3, #4]
 80014d8:	07d2      	lsls	r2, r2, #31
 80014da:	d554      	bpl.n	8001586 <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80014dc:	7e22      	ldrb	r2, [r4, #24]
 80014de:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	bf0c      	ite	eq
 80014e4:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80014e8:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 80014ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80014ee:	7e62      	ldrb	r2, [r4, #25]
 80014f0:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	bf0c      	ite	eq
 80014f6:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80014fa:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 80014fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001500:	7ea2      	ldrb	r2, [r4, #26]
 8001502:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	bf0c      	ite	eq
 8001508:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800150c:	f022 0220 	bicne.w	r2, r2, #32
 8001510:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001512:	7ee2      	ldrb	r2, [r4, #27]
 8001514:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	bf0c      	ite	eq
 800151a:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800151e:	f042 0210 	orrne.w	r2, r2, #16
 8001522:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001524:	7f22      	ldrb	r2, [r4, #28]
 8001526:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	bf0c      	ite	eq
 800152c:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001530:	f022 0208 	bicne.w	r2, r2, #8
 8001534:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001536:	7f62      	ldrb	r2, [r4, #29]
 8001538:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	bf0c      	ite	eq
 800153e:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001542:	f022 0204 	bicne.w	r2, r2, #4
 8001546:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001548:	68e1      	ldr	r1, [r4, #12]
 800154a:	68a2      	ldr	r2, [r4, #8]
 800154c:	430a      	orrs	r2, r1
 800154e:	6921      	ldr	r1, [r4, #16]
 8001550:	430a      	orrs	r2, r1
 8001552:	6961      	ldr	r1, [r4, #20]
 8001554:	430a      	orrs	r2, r1
 8001556:	6861      	ldr	r1, [r4, #4]
 8001558:	3901      	subs	r1, #1
 800155a:	430a      	orrs	r2, r1
 800155c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800155e:	2000      	movs	r0, #0

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001560:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001562:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8001564:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
 8001568:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800156a:	f7ff faf7 	bl	8000b5c <HAL_GetTick>
 800156e:	1b40      	subs	r0, r0, r5
 8001570:	280a      	cmp	r0, #10
 8001572:	d9a4      	bls.n	80014be <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001574:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001576:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800157a:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 800157c:	2305      	movs	r3, #5
 800157e:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8001582:	2001      	movs	r0, #1
}
 8001584:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001586:	f7ff fae9 	bl	8000b5c <HAL_GetTick>
 800158a:	1b40      	subs	r0, r0, r5
 800158c:	280a      	cmp	r0, #10
 800158e:	d9a1      	bls.n	80014d4 <HAL_CAN_Init+0x38>
 8001590:	e7f0      	b.n	8001574 <HAL_CAN_Init+0xd8>

08001592 <HAL_CAN_TxMailbox0CompleteCallback>:
 8001592:	4770      	bx	lr

08001594 <HAL_CAN_TxMailbox1CompleteCallback>:
 8001594:	4770      	bx	lr

08001596 <HAL_CAN_TxMailbox2CompleteCallback>:
 8001596:	4770      	bx	lr

08001598 <HAL_CAN_TxMailbox0AbortCallback>:
 8001598:	4770      	bx	lr

0800159a <HAL_CAN_TxMailbox1AbortCallback>:
 800159a:	4770      	bx	lr

0800159c <HAL_CAN_TxMailbox2AbortCallback>:
 800159c:	4770      	bx	lr

0800159e <HAL_CAN_RxFifo0MsgPendingCallback>:
 800159e:	4770      	bx	lr

080015a0 <HAL_CAN_RxFifo0FullCallback>:
 80015a0:	4770      	bx	lr

080015a2 <HAL_CAN_RxFifo1MsgPendingCallback>:
 80015a2:	4770      	bx	lr

080015a4 <HAL_CAN_RxFifo1FullCallback>:
 80015a4:	4770      	bx	lr

080015a6 <HAL_CAN_SleepCallback>:
 80015a6:	4770      	bx	lr

080015a8 <HAL_CAN_WakeUpFromRxMsgCallback>:
 80015a8:	4770      	bx	lr

080015aa <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80015aa:	4770      	bx	lr

080015ac <HAL_CAN_IRQHandler>:
{
 80015ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80015b0:	6803      	ldr	r3, [r0, #0]
 80015b2:	695e      	ldr	r6, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80015b4:	f8d3 9004 	ldr.w	r9, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80015b8:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80015ba:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80015be:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80015c2:	f8d3 8018 	ldr.w	r8, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80015c6:	f016 0401 	ands.w	r4, r6, #1
{
 80015ca:	4605      	mov	r5, r0
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80015cc:	d022      	beq.n	8001614 <HAL_CAN_IRQHandler+0x68>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80015ce:	f017 0401 	ands.w	r4, r7, #1
 80015d2:	d007      	beq.n	80015e4 <HAL_CAN_IRQHandler+0x38>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80015d4:	2201      	movs	r2, #1
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80015d6:	07b9      	lsls	r1, r7, #30
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80015d8:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80015da:	f140 80a3 	bpl.w	8001724 <HAL_CAN_IRQHandler+0x178>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80015de:	f7ff ffd8 	bl	8001592 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80015e2:	2400      	movs	r4, #0
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80015e4:	05fb      	lsls	r3, r7, #23
 80015e6:	d509      	bpl.n	80015fc <HAL_CAN_IRQHandler+0x50>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80015e8:	682b      	ldr	r3, [r5, #0]
 80015ea:	f44f 7280 	mov.w	r2, #256	; 0x100
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80015ee:	05b8      	lsls	r0, r7, #22
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80015f0:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80015f2:	f140 80a5 	bpl.w	8001740 <HAL_CAN_IRQHandler+0x194>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80015f6:	4628      	mov	r0, r5
 80015f8:	f7ff ffcc 	bl	8001594 <HAL_CAN_TxMailbox1CompleteCallback>
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80015fc:	03fb      	lsls	r3, r7, #15
 80015fe:	d509      	bpl.n	8001614 <HAL_CAN_IRQHandler+0x68>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001600:	682b      	ldr	r3, [r5, #0]
 8001602:	f44f 3280 	mov.w	r2, #65536	; 0x10000
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001606:	03b8      	lsls	r0, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001608:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800160a:	f140 80a7 	bpl.w	800175c <HAL_CAN_IRQHandler+0x1b0>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800160e:	4628      	mov	r0, r5
 8001610:	f7ff ffc1 	bl	8001596 <HAL_CAN_TxMailbox2CompleteCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001614:	0733      	lsls	r3, r6, #28
 8001616:	d507      	bpl.n	8001628 <HAL_CAN_IRQHandler+0x7c>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001618:	f01b 0f10 	tst.w	fp, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800161c:	bf1f      	itttt	ne
 800161e:	682b      	ldrne	r3, [r5, #0]
 8001620:	2210      	movne	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001622:	f444 7400 	orrne.w	r4, r4, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001626:	60da      	strne	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001628:	0777      	lsls	r7, r6, #29
 800162a:	d508      	bpl.n	800163e <HAL_CAN_IRQHandler+0x92>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800162c:	f01b 0f08 	tst.w	fp, #8
 8001630:	d005      	beq.n	800163e <HAL_CAN_IRQHandler+0x92>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001632:	682b      	ldr	r3, [r5, #0]
 8001634:	2208      	movs	r2, #8
 8001636:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001638:	4628      	mov	r0, r5
 800163a:	f7ff ffb1 	bl	80015a0 <HAL_CAN_RxFifo0FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800163e:	07b0      	lsls	r0, r6, #30
 8001640:	d506      	bpl.n	8001650 <HAL_CAN_IRQHandler+0xa4>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001642:	682b      	ldr	r3, [r5, #0]
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	0799      	lsls	r1, r3, #30
 8001648:	d002      	beq.n	8001650 <HAL_CAN_IRQHandler+0xa4>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800164a:	4628      	mov	r0, r5
 800164c:	f7ff ffa7 	bl	800159e <HAL_CAN_RxFifo0MsgPendingCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001650:	0672      	lsls	r2, r6, #25
 8001652:	d507      	bpl.n	8001664 <HAL_CAN_IRQHandler+0xb8>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001654:	f01a 0f10 	tst.w	sl, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001658:	bf1f      	itttt	ne
 800165a:	682b      	ldrne	r3, [r5, #0]
 800165c:	2210      	movne	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800165e:	f444 6480 	orrne.w	r4, r4, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001662:	611a      	strne	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001664:	06b3      	lsls	r3, r6, #26
 8001666:	d508      	bpl.n	800167a <HAL_CAN_IRQHandler+0xce>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001668:	f01a 0f08 	tst.w	sl, #8
 800166c:	d005      	beq.n	800167a <HAL_CAN_IRQHandler+0xce>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800166e:	682b      	ldr	r3, [r5, #0]
 8001670:	2208      	movs	r2, #8
 8001672:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001674:	4628      	mov	r0, r5
 8001676:	f7ff ff95 	bl	80015a4 <HAL_CAN_RxFifo1FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800167a:	06f7      	lsls	r7, r6, #27
 800167c:	d506      	bpl.n	800168c <HAL_CAN_IRQHandler+0xe0>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800167e:	682b      	ldr	r3, [r5, #0]
 8001680:	691b      	ldr	r3, [r3, #16]
 8001682:	0798      	lsls	r0, r3, #30
 8001684:	d002      	beq.n	800168c <HAL_CAN_IRQHandler+0xe0>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001686:	4628      	mov	r0, r5
 8001688:	f7ff ff8b 	bl	80015a2 <HAL_CAN_RxFifo1MsgPendingCallback>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800168c:	03b1      	lsls	r1, r6, #14
 800168e:	d508      	bpl.n	80016a2 <HAL_CAN_IRQHandler+0xf6>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001690:	f019 0f10 	tst.w	r9, #16
 8001694:	d005      	beq.n	80016a2 <HAL_CAN_IRQHandler+0xf6>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001696:	682b      	ldr	r3, [r5, #0]
 8001698:	2210      	movs	r2, #16
 800169a:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 800169c:	4628      	mov	r0, r5
 800169e:	f7ff ff82 	bl	80015a6 <HAL_CAN_SleepCallback>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80016a2:	03f2      	lsls	r2, r6, #15
 80016a4:	d508      	bpl.n	80016b8 <HAL_CAN_IRQHandler+0x10c>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80016a6:	f019 0f08 	tst.w	r9, #8
 80016aa:	d005      	beq.n	80016b8 <HAL_CAN_IRQHandler+0x10c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80016ac:	682b      	ldr	r3, [r5, #0]
 80016ae:	2208      	movs	r2, #8
 80016b0:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80016b2:	4628      	mov	r0, r5
 80016b4:	f7ff ff78 	bl	80015a8 <HAL_CAN_WakeUpFromRxMsgCallback>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80016b8:	0433      	lsls	r3, r6, #16
 80016ba:	d52a      	bpl.n	8001712 <HAL_CAN_IRQHandler+0x166>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80016bc:	f019 0f04 	tst.w	r9, #4
 80016c0:	682a      	ldr	r2, [r5, #0]
 80016c2:	d024      	beq.n	800170e <HAL_CAN_IRQHandler+0x162>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80016c4:	05f7      	lsls	r7, r6, #23
 80016c6:	d504      	bpl.n	80016d2 <HAL_CAN_IRQHandler+0x126>
 80016c8:	f018 0f01 	tst.w	r8, #1
        errorcode |= HAL_CAN_ERROR_EWG;
 80016cc:	bf18      	it	ne
 80016ce:	f044 0401 	orrne.w	r4, r4, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80016d2:	05b0      	lsls	r0, r6, #22
 80016d4:	d504      	bpl.n	80016e0 <HAL_CAN_IRQHandler+0x134>
 80016d6:	f018 0f02 	tst.w	r8, #2
        errorcode |= HAL_CAN_ERROR_EPV;
 80016da:	bf18      	it	ne
 80016dc:	f044 0402 	orrne.w	r4, r4, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80016e0:	0571      	lsls	r1, r6, #21
 80016e2:	d504      	bpl.n	80016ee <HAL_CAN_IRQHandler+0x142>
 80016e4:	f018 0f04 	tst.w	r8, #4
        errorcode |= HAL_CAN_ERROR_BOF;
 80016e8:	bf18      	it	ne
 80016ea:	f044 0404 	orrne.w	r4, r4, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80016ee:	0533      	lsls	r3, r6, #20
 80016f0:	d50d      	bpl.n	800170e <HAL_CAN_IRQHandler+0x162>
 80016f2:	f018 0370 	ands.w	r3, r8, #112	; 0x70
 80016f6:	d00a      	beq.n	800170e <HAL_CAN_IRQHandler+0x162>
        switch (esrflags & CAN_ESR_LEC)
 80016f8:	2b30      	cmp	r3, #48	; 0x30
 80016fa:	d04c      	beq.n	8001796 <HAL_CAN_IRQHandler+0x1ea>
 80016fc:	d83c      	bhi.n	8001778 <HAL_CAN_IRQHandler+0x1cc>
 80016fe:	2b10      	cmp	r3, #16
 8001700:	d043      	beq.n	800178a <HAL_CAN_IRQHandler+0x1de>
 8001702:	2b20      	cmp	r3, #32
 8001704:	d044      	beq.n	8001790 <HAL_CAN_IRQHandler+0x1e4>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001706:	6993      	ldr	r3, [r2, #24]
 8001708:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800170c:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800170e:	2304      	movs	r3, #4
 8001710:	6053      	str	r3, [r2, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001712:	b12c      	cbz	r4, 8001720 <HAL_CAN_IRQHandler+0x174>
    hcan->ErrorCode |= errorcode;
 8001714:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001716:	431c      	orrs	r4, r3
 8001718:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 800171a:	4628      	mov	r0, r5
 800171c:	f7ff ff45 	bl	80015aa <HAL_CAN_ErrorCallback>
 8001720:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001724:	077a      	lsls	r2, r7, #29
 8001726:	d405      	bmi.n	8001734 <HAL_CAN_IRQHandler+0x188>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001728:	f017 0408 	ands.w	r4, r7, #8
 800172c:	d105      	bne.n	800173a <HAL_CAN_IRQHandler+0x18e>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800172e:	f7ff ff33 	bl	8001598 <HAL_CAN_TxMailbox0AbortCallback>
 8001732:	e757      	b.n	80015e4 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001734:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8001738:	e754      	b.n	80015e4 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800173a:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 800173e:	e751      	b.n	80015e4 <HAL_CAN_IRQHandler+0x38>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001740:	0579      	lsls	r1, r7, #21
 8001742:	d502      	bpl.n	800174a <HAL_CAN_IRQHandler+0x19e>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001744:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8001748:	e758      	b.n	80015fc <HAL_CAN_IRQHandler+0x50>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800174a:	053a      	lsls	r2, r7, #20
 800174c:	d502      	bpl.n	8001754 <HAL_CAN_IRQHandler+0x1a8>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800174e:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8001752:	e753      	b.n	80015fc <HAL_CAN_IRQHandler+0x50>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001754:	4628      	mov	r0, r5
 8001756:	f7ff ff20 	bl	800159a <HAL_CAN_TxMailbox1AbortCallback>
 800175a:	e74f      	b.n	80015fc <HAL_CAN_IRQHandler+0x50>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800175c:	0379      	lsls	r1, r7, #13
 800175e:	d502      	bpl.n	8001766 <HAL_CAN_IRQHandler+0x1ba>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001760:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8001764:	e756      	b.n	8001614 <HAL_CAN_IRQHandler+0x68>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001766:	033a      	lsls	r2, r7, #12
 8001768:	d502      	bpl.n	8001770 <HAL_CAN_IRQHandler+0x1c4>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800176a:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 800176e:	e751      	b.n	8001614 <HAL_CAN_IRQHandler+0x68>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001770:	4628      	mov	r0, r5
 8001772:	f7ff ff13 	bl	800159c <HAL_CAN_TxMailbox2AbortCallback>
 8001776:	e74d      	b.n	8001614 <HAL_CAN_IRQHandler+0x68>
        switch (esrflags & CAN_ESR_LEC)
 8001778:	2b50      	cmp	r3, #80	; 0x50
 800177a:	d00f      	beq.n	800179c <HAL_CAN_IRQHandler+0x1f0>
 800177c:	2b60      	cmp	r3, #96	; 0x60
 800177e:	d010      	beq.n	80017a2 <HAL_CAN_IRQHandler+0x1f6>
 8001780:	2b40      	cmp	r3, #64	; 0x40
 8001782:	d1c0      	bne.n	8001706 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BR;
 8001784:	f044 0440 	orr.w	r4, r4, #64	; 0x40
            break;
 8001788:	e7bd      	b.n	8001706 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_STF;
 800178a:	f044 0408 	orr.w	r4, r4, #8
            break;
 800178e:	e7ba      	b.n	8001706 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001790:	f044 0410 	orr.w	r4, r4, #16
            break;
 8001794:	e7b7      	b.n	8001706 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001796:	f044 0420 	orr.w	r4, r4, #32
            break;
 800179a:	e7b4      	b.n	8001706 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BD;
 800179c:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            break;
 80017a0:	e7b1      	b.n	8001706 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80017a2:	f444 7480 	orr.w	r4, r4, #256	; 0x100
            break;
 80017a6:	e7ae      	b.n	8001706 <HAL_CAN_IRQHandler+0x15a>

080017a8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a8:	4a07      	ldr	r2, [pc, #28]	; (80017c8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80017aa:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80017b0:	041b      	lsls	r3, r3, #16
 80017b2:	0c1b      	lsrs	r3, r3, #16
 80017b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017b8:	0200      	lsls	r0, r0, #8
 80017ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017be:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80017c2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80017c4:	60d3      	str	r3, [r2, #12]
 80017c6:	4770      	bx	lr
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017cc:	4b17      	ldr	r3, [pc, #92]	; (800182c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017ce:	b530      	push	{r4, r5, lr}
 80017d0:	68dc      	ldr	r4, [r3, #12]
 80017d2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017d6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017da:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017dc:	2b04      	cmp	r3, #4
 80017de:	bf28      	it	cs
 80017e0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017e2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e4:	f04f 0501 	mov.w	r5, #1
 80017e8:	fa05 f303 	lsl.w	r3, r5, r3
 80017ec:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017f0:	bf8c      	ite	hi
 80017f2:	3c03      	subhi	r4, #3
 80017f4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f6:	4019      	ands	r1, r3
 80017f8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017fa:	fa05 f404 	lsl.w	r4, r5, r4
 80017fe:	3c01      	subs	r4, #1
 8001800:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8001802:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001804:	ea42 0201 	orr.w	r2, r2, r1
 8001808:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180c:	bfad      	iteet	ge
 800180e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001812:	f000 000f 	andlt.w	r0, r0, #15
 8001816:	4b06      	ldrlt	r3, [pc, #24]	; (8001830 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001818:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181c:	bfb5      	itete	lt
 800181e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001820:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001822:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001824:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001828:	bd30      	pop	{r4, r5, pc}
 800182a:	bf00      	nop
 800182c:	e000ed00 	.word	0xe000ed00
 8001830:	e000ed14 	.word	0xe000ed14

08001834 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001834:	2800      	cmp	r0, #0
 8001836:	db08      	blt.n	800184a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001838:	0942      	lsrs	r2, r0, #5
 800183a:	2301      	movs	r3, #1
 800183c:	f000 001f 	and.w	r0, r0, #31
 8001840:	fa03 f000 	lsl.w	r0, r3, r0
 8001844:	4b01      	ldr	r3, [pc, #4]	; (800184c <HAL_NVIC_EnableIRQ+0x18>)
 8001846:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800184a:	4770      	bx	lr
 800184c:	e000e100 	.word	0xe000e100

08001850 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001850:	3801      	subs	r0, #1
 8001852:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001856:	d20a      	bcs.n	800186e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001858:	4b06      	ldr	r3, [pc, #24]	; (8001874 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185a:	4a07      	ldr	r2, [pc, #28]	; (8001878 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800185c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185e:	21f0      	movs	r1, #240	; 0xf0
 8001860:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001864:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001866:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001868:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800186e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	e000e010 	.word	0xe000e010
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800187c:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800187e:	b330      	cbz	r0, 80018ce <HAL_DMA_Init+0x52>
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001880:	6884      	ldr	r4, [r0, #8]
 8001882:	6843      	ldr	r3, [r0, #4]
  tmp = hdma->Instance->CCR;
 8001884:	6801      	ldr	r1, [r0, #0]
  tmp |=  hdma->Init.Direction        |
 8001886:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001888:	68c4      	ldr	r4, [r0, #12]
  tmp = hdma->Instance->CCR;
 800188a:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800188c:	4323      	orrs	r3, r4
 800188e:	6904      	ldr	r4, [r0, #16]
 8001890:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001892:	6944      	ldr	r4, [r0, #20]
 8001894:	4323      	orrs	r3, r4
 8001896:	6984      	ldr	r4, [r0, #24]
 8001898:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 800189a:	69c4      	ldr	r4, [r0, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800189c:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 80018a0:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 80018a4:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 80018a6:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80018a8:	600b      	str	r3, [r1, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80018aa:	4b0a      	ldr	r3, [pc, #40]	; (80018d4 <HAL_DMA_Init+0x58>)
 80018ac:	2214      	movs	r2, #20
 80018ae:	440b      	add	r3, r1
 80018b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80018b8:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <HAL_DMA_Init+0x5c>)
 80018ba:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 80018bc:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018be:	2300      	movs	r3, #0
 80018c0:	6383      	str	r3, [r0, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 80018c2:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 80018c6:	f880 3020 	strb.w	r3, [r0, #32]
  return HAL_OK;
 80018ca:	4618      	mov	r0, r3
 80018cc:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80018ce:	2001      	movs	r0, #1
}  
 80018d0:	bd10      	pop	{r4, pc}
 80018d2:	bf00      	nop
 80018d4:	bffdfff8 	.word	0xbffdfff8
 80018d8:	40020000 	.word	0x40020000

080018dc <HAL_DMA_Start_IT>:
{
 80018dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 80018de:	f890 4020 	ldrb.w	r4, [r0, #32]
 80018e2:	2c01      	cmp	r4, #1
 80018e4:	d035      	beq.n	8001952 <HAL_DMA_Start_IT+0x76>
  if(HAL_DMA_STATE_READY == hdma->State)
 80018e6:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 80018ea:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 80018ec:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 80018ee:	f880 4020 	strb.w	r4, [r0, #32]
 80018f2:	f04f 0600 	mov.w	r6, #0
 80018f6:	f04f 0402 	mov.w	r4, #2
  if(HAL_DMA_STATE_READY == hdma->State)
 80018fa:	d128      	bne.n	800194e <HAL_DMA_Start_IT+0x72>
  	hdma->State = HAL_DMA_STATE_BUSY;
 80018fc:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001900:	6804      	ldr	r4, [r0, #0]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001902:	6386      	str	r6, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001904:	6826      	ldr	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001906:	6c07      	ldr	r7, [r0, #64]	; 0x40
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001908:	f026 0601 	bic.w	r6, r6, #1
 800190c:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800190e:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8001910:	40bd      	lsls	r5, r7
 8001912:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 8001914:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001916:	6843      	ldr	r3, [r0, #4]
 8001918:	6805      	ldr	r5, [r0, #0]
 800191a:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 800191c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->Instance->CPAR = DstAddress;
 800191e:	bf0b      	itete	eq
 8001920:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 8001922:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001924:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 8001926:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8001928:	b14b      	cbz	r3, 800193e <HAL_DMA_Start_IT+0x62>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800192a:	6823      	ldr	r3, [r4, #0]
 800192c:	f043 030e 	orr.w	r3, r3, #14
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001930:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001932:	682b      	ldr	r3, [r5, #0]
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	602b      	str	r3, [r5, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800193a:	2000      	movs	r0, #0
 800193c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800193e:	6823      	ldr	r3, [r4, #0]
 8001940:	f043 030a 	orr.w	r3, r3, #10
 8001944:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001946:	6823      	ldr	r3, [r4, #0]
 8001948:	f023 0304 	bic.w	r3, r3, #4
 800194c:	e7f0      	b.n	8001930 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 800194e:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8001952:	2002      	movs	r0, #2
} 
 8001954:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001956 <HAL_DMA_IRQHandler>:
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001956:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001958:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 800195a:	6803      	ldr	r3, [r0, #0]
{
 800195c:	b470      	push	{r4, r5, r6}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800195e:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001960:	681d      	ldr	r5, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001962:	2404      	movs	r4, #4
 8001964:	4094      	lsls	r4, r2
 8001966:	4226      	tst	r6, r4
 8001968:	d00e      	beq.n	8001988 <HAL_DMA_IRQHandler+0x32>
 800196a:	f015 0f04 	tst.w	r5, #4
 800196e:	d00b      	beq.n	8001988 <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	0692      	lsls	r2, r2, #26
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001974:	bf5e      	ittt	pl
 8001976:	681a      	ldrpl	r2, [r3, #0]
 8001978:	f022 0204 	bicpl.w	r2, r2, #4
 800197c:	601a      	strpl	r2, [r3, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 800197e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001980:	604c      	str	r4, [r1, #4]
    if(hdma->XferErrorCallback != NULL)
 8001982:	b373      	cbz	r3, 80019e2 <HAL_DMA_IRQHandler+0x8c>
}  
 8001984:	bc70      	pop	{r4, r5, r6}
    	hdma->XferErrorCallback(hdma);
 8001986:	4718      	bx	r3
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001988:	2402      	movs	r4, #2
 800198a:	4094      	lsls	r4, r2
 800198c:	4226      	tst	r6, r4
 800198e:	d012      	beq.n	80019b6 <HAL_DMA_IRQHandler+0x60>
 8001990:	f015 0f02 	tst.w	r5, #2
 8001994:	d00f      	beq.n	80019b6 <HAL_DMA_IRQHandler+0x60>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	0695      	lsls	r5, r2, #26
 800199a:	d406      	bmi.n	80019aa <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	f022 020a 	bic.w	r2, r2, #10
 80019a2:	601a      	str	r2, [r3, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 80019a4:	2301      	movs	r3, #1
 80019a6:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  	__HAL_UNLOCK(hdma);
 80019aa:	2300      	movs	r3, #0
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80019ac:	604c      	str	r4, [r1, #4]
  	__HAL_UNLOCK(hdma);
 80019ae:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 80019b2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80019b4:	e7e5      	b.n	8001982 <HAL_DMA_IRQHandler+0x2c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80019b6:	2408      	movs	r4, #8
 80019b8:	4094      	lsls	r4, r2
 80019ba:	4234      	tst	r4, r6
 80019bc:	d011      	beq.n	80019e2 <HAL_DMA_IRQHandler+0x8c>
 80019be:	072c      	lsls	r4, r5, #28
 80019c0:	d50f      	bpl.n	80019e2 <HAL_DMA_IRQHandler+0x8c>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80019c2:	681c      	ldr	r4, [r3, #0]
 80019c4:	f024 040e 	bic.w	r4, r4, #14
 80019c8:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80019ca:	2301      	movs	r3, #1
 80019cc:	fa03 f202 	lsl.w	r2, r3, r2
 80019d0:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80019d2:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 80019d4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma); 
 80019d8:	2300      	movs	r3, #0
 80019da:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 80019de:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80019e0:	e7cf      	b.n	8001982 <HAL_DMA_IRQHandler+0x2c>
}  
 80019e2:	bc70      	pop	{r4, r5, r6}
 80019e4:	4770      	bx	lr
	...

080019e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019ec:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ee:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f0:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8001b58 <HAL_GPIO_Init+0x170>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019f4:	4a56      	ldr	r2, [pc, #344]	; (8001b50 <HAL_GPIO_Init+0x168>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019f6:	9301      	str	r3, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019f8:	f04f 090f 	mov.w	r9, #15
  uint32_t position = 0x00u;
 80019fc:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019fe:	9c01      	ldr	r4, [sp, #4]
 8001a00:	40dc      	lsrs	r4, r3
 8001a02:	d102      	bne.n	8001a0a <HAL_GPIO_Init+0x22>
      }
    }

    position++;
  }
}
 8001a04:	b005      	add	sp, #20
 8001a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a0a:	2401      	movs	r4, #1
 8001a0c:	fa04 fa03 	lsl.w	sl, r4, r3
    if (iocurrent != 0x00u)
 8001a10:	9c01      	ldr	r4, [sp, #4]
 8001a12:	ea14 050a 	ands.w	r5, r4, sl
 8001a16:	f000 8093 	beq.w	8001b40 <HAL_GPIO_Init+0x158>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a1a:	684c      	ldr	r4, [r1, #4]
 8001a1c:	f024 0b10 	bic.w	fp, r4, #16
 8001a20:	f1bb 0f02 	cmp.w	fp, #2
 8001a24:	d111      	bne.n	8001a4a <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3u];
 8001a26:	08df      	lsrs	r7, r3, #3
 8001a28:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a2c:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8001a30:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a32:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001a36:	fa09 fc0e 	lsl.w	ip, r9, lr
 8001a3a:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a3e:	690e      	ldr	r6, [r1, #16]
 8001a40:	fa06 f60e 	lsl.w	r6, r6, lr
 8001a44:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3u] = temp;
 8001a48:	623e      	str	r6, [r7, #32]
 8001a4a:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001a4e:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8001a50:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001a52:	fa07 f70c 	lsl.w	r7, r7, ip
 8001a56:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a58:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001a5c:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a5e:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a62:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a66:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a6a:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 8001a6e:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a70:	d811      	bhi.n	8001a96 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 8001a72:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001a74:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a78:	68ce      	ldr	r6, [r1, #12]
 8001a7a:	fa06 fe0c 	lsl.w	lr, r6, ip
 8001a7e:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 8001a82:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8001a84:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a86:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001a8a:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8001a8e:	409e      	lsls	r6, r3
 8001a90:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 8001a94:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8001a96:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001a98:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a9a:	688e      	ldr	r6, [r1, #8]
 8001a9c:	fa06 f60c 	lsl.w	r6, r6, ip
 8001aa0:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001aa2:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 8001aa4:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001aa6:	d54b      	bpl.n	8001b40 <HAL_GPIO_Init+0x158>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa8:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8001aac:	f046 0601 	orr.w	r6, r6, #1
 8001ab0:	f8c8 6018 	str.w	r6, [r8, #24]
 8001ab4:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8001ab8:	f023 0703 	bic.w	r7, r3, #3
 8001abc:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001ac0:	f006 0601 	and.w	r6, r6, #1
 8001ac4:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8001ac8:	9603      	str	r6, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001aca:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ace:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001ad0:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ad2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001ad6:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ada:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ade:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ae2:	d02f      	beq.n	8001b44 <HAL_GPIO_Init+0x15c>
 8001ae4:	4e1b      	ldr	r6, [pc, #108]	; (8001b54 <HAL_GPIO_Init+0x16c>)
 8001ae6:	42b0      	cmp	r0, r6
 8001ae8:	d02e      	beq.n	8001b48 <HAL_GPIO_Init+0x160>
 8001aea:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001aee:	42b0      	cmp	r0, r6
 8001af0:	d02c      	beq.n	8001b4c <HAL_GPIO_Init+0x164>
 8001af2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001af6:	42b0      	cmp	r0, r6
 8001af8:	bf14      	ite	ne
 8001afa:	2605      	movne	r6, #5
 8001afc:	2603      	moveq	r6, #3
 8001afe:	fa06 f60e 	lsl.w	r6, r6, lr
 8001b02:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b06:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8001b08:	6816      	ldr	r6, [r2, #0]
        temp &= ~(iocurrent);
 8001b0a:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b0c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 8001b10:	bf0c      	ite	eq
 8001b12:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001b14:	432e      	orrne	r6, r5
        EXTI->IMR = temp;
 8001b16:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8001b18:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b1a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 8001b1e:	bf0c      	ite	eq
 8001b20:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001b22:	432e      	orrne	r6, r5
        EXTI->EMR = temp;
 8001b24:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8001b26:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b28:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8001b2c:	bf0c      	ite	eq
 8001b2e:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001b30:	432e      	orrne	r6, r5
        EXTI->RTSR = temp;
 8001b32:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8001b34:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b36:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 8001b38:	bf54      	ite	pl
 8001b3a:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8001b3c:	432e      	orrmi	r6, r5
        EXTI->FTSR = temp;
 8001b3e:	60d6      	str	r6, [r2, #12]
    position++;
 8001b40:	3301      	adds	r3, #1
 8001b42:	e75c      	b.n	80019fe <HAL_GPIO_Init+0x16>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b44:	2600      	movs	r6, #0
 8001b46:	e7da      	b.n	8001afe <HAL_GPIO_Init+0x116>
 8001b48:	2601      	movs	r6, #1
 8001b4a:	e7d8      	b.n	8001afe <HAL_GPIO_Init+0x116>
 8001b4c:	2602      	movs	r6, #2
 8001b4e:	e7d6      	b.n	8001afe <HAL_GPIO_Init+0x116>
 8001b50:	40010400 	.word	0x40010400
 8001b54:	48000400 	.word	0x48000400
 8001b58:	40021000 	.word	0x40021000

08001b5c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b5c:	b10a      	cbz	r2, 8001b62 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b5e:	6181      	str	r1, [r0, #24]
 8001b60:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b62:	6281      	str	r1, [r0, #40]	; 0x28
 8001b64:	4770      	bx	lr
	...

08001b68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b68:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b6c:	4605      	mov	r5, r0
 8001b6e:	b908      	cbnz	r0, 8001b74 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8001b70:	2001      	movs	r0, #1
 8001b72:	e05f      	b.n	8001c34 <HAL_RCC_OscConfig+0xcc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b74:	6803      	ldr	r3, [r0, #0]
 8001b76:	07da      	lsls	r2, r3, #31
 8001b78:	d411      	bmi.n	8001b9e <HAL_RCC_OscConfig+0x36>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b7a:	682b      	ldr	r3, [r5, #0]
 8001b7c:	079b      	lsls	r3, r3, #30
 8001b7e:	f100 8087 	bmi.w	8001c90 <HAL_RCC_OscConfig+0x128>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b82:	682b      	ldr	r3, [r5, #0]
 8001b84:	071c      	lsls	r4, r3, #28
 8001b86:	f100 80f8 	bmi.w	8001d7a <HAL_RCC_OscConfig+0x212>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b8a:	682b      	ldr	r3, [r5, #0]
 8001b8c:	0758      	lsls	r0, r3, #29
 8001b8e:	f100 8141 	bmi.w	8001e14 <HAL_RCC_OscConfig+0x2ac>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b92:	69e8      	ldr	r0, [r5, #28]
 8001b94:	2800      	cmp	r0, #0
 8001b96:	f040 81d8 	bne.w	8001f4a <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }

  return HAL_OK;
 8001b9a:	2000      	movs	r0, #0
 8001b9c:	e04a      	b.n	8001c34 <HAL_RCC_OscConfig+0xcc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b9e:	4cbb      	ldr	r4, [pc, #748]	; (8001e8c <HAL_RCC_OscConfig+0x324>)
 8001ba0:	6863      	ldr	r3, [r4, #4]
 8001ba2:	f003 030c 	and.w	r3, r3, #12
 8001ba6:	2b04      	cmp	r3, #4
 8001ba8:	d007      	beq.n	8001bba <HAL_RCC_OscConfig+0x52>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001baa:	6863      	ldr	r3, [r4, #4]
 8001bac:	f003 030c 	and.w	r3, r3, #12
 8001bb0:	2b08      	cmp	r3, #8
 8001bb2:	d116      	bne.n	8001be2 <HAL_RCC_OscConfig+0x7a>
 8001bb4:	6863      	ldr	r3, [r4, #4]
 8001bb6:	03df      	lsls	r7, r3, #15
 8001bb8:	d513      	bpl.n	8001be2 <HAL_RCC_OscConfig+0x7a>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bbe:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc2:	6821      	ldr	r1, [r4, #0]
 8001bc4:	fa93 f3a3 	rbit	r3, r3
 8001bc8:	fab3 f383 	clz	r3, r3
 8001bcc:	f003 031f 	and.w	r3, r3, #31
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	420b      	tst	r3, r1
 8001bd8:	d0cf      	beq.n	8001b7a <HAL_RCC_OscConfig+0x12>
 8001bda:	686b      	ldr	r3, [r5, #4]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d1cc      	bne.n	8001b7a <HAL_RCC_OscConfig+0x12>
 8001be0:	e7c6      	b.n	8001b70 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001be2:	686a      	ldr	r2, [r5, #4]
 8001be4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001be8:	d127      	bne.n	8001c3a <HAL_RCC_OscConfig+0xd2>
 8001bea:	6823      	ldr	r3, [r4, #0]
 8001bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bf0:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bf2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001bf4:	68a9      	ldr	r1, [r5, #8]
 8001bf6:	f023 030f 	bic.w	r3, r3, #15
 8001bfa:	430b      	orrs	r3, r1
 8001bfc:	62e3      	str	r3, [r4, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bfe:	b362      	cbz	r2, 8001c5a <HAL_RCC_OscConfig+0xf2>
        tickstart = HAL_GetTick();
 8001c00:	f7fe ffac 	bl	8000b5c <HAL_GetTick>
 8001c04:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001c08:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c0a:	2701      	movs	r7, #1
 8001c0c:	fa96 f3a6 	rbit	r3, r6
 8001c10:	6822      	ldr	r2, [r4, #0]
 8001c12:	fa96 f3a6 	rbit	r3, r6
 8001c16:	fab3 f383 	clz	r3, r3
 8001c1a:	f003 031f 	and.w	r3, r3, #31
 8001c1e:	fa07 f303 	lsl.w	r3, r7, r3
 8001c22:	4213      	tst	r3, r2
 8001c24:	d1a9      	bne.n	8001b7a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c26:	f7fe ff99 	bl	8000b5c <HAL_GetTick>
 8001c2a:	eba0 0008 	sub.w	r0, r0, r8
 8001c2e:	2864      	cmp	r0, #100	; 0x64
 8001c30:	d9ec      	bls.n	8001c0c <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
 8001c32:	2003      	movs	r0, #3
}
 8001c34:	b002      	add	sp, #8
 8001c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c3a:	6823      	ldr	r3, [r4, #0]
 8001c3c:	b932      	cbnz	r2, 8001c4c <HAL_RCC_OscConfig+0xe4>
 8001c3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c42:	6023      	str	r3, [r4, #0]
 8001c44:	6823      	ldr	r3, [r4, #0]
 8001c46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c4a:	e7d1      	b.n	8001bf0 <HAL_RCC_OscConfig+0x88>
 8001c4c:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8001c50:	d1f5      	bne.n	8001c3e <HAL_RCC_OscConfig+0xd6>
 8001c52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c56:	6023      	str	r3, [r4, #0]
 8001c58:	e7c7      	b.n	8001bea <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8001c5a:	f7fe ff7f 	bl	8000b5c <HAL_GetTick>
 8001c5e:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001c62:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c64:	2701      	movs	r7, #1
 8001c66:	fa96 f3a6 	rbit	r3, r6
 8001c6a:	6822      	ldr	r2, [r4, #0]
 8001c6c:	fa96 f3a6 	rbit	r3, r6
 8001c70:	fab3 f383 	clz	r3, r3
 8001c74:	f003 031f 	and.w	r3, r3, #31
 8001c78:	fa07 f303 	lsl.w	r3, r7, r3
 8001c7c:	4213      	tst	r3, r2
 8001c7e:	f43f af7c 	beq.w	8001b7a <HAL_RCC_OscConfig+0x12>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c82:	f7fe ff6b 	bl	8000b5c <HAL_GetTick>
 8001c86:	eba0 0008 	sub.w	r0, r0, r8
 8001c8a:	2864      	cmp	r0, #100	; 0x64
 8001c8c:	d9eb      	bls.n	8001c66 <HAL_RCC_OscConfig+0xfe>
 8001c8e:	e7d0      	b.n	8001c32 <HAL_RCC_OscConfig+0xca>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c90:	4c7e      	ldr	r4, [pc, #504]	; (8001e8c <HAL_RCC_OscConfig+0x324>)
 8001c92:	6863      	ldr	r3, [r4, #4]
 8001c94:	f013 0f0c 	tst.w	r3, #12
 8001c98:	d007      	beq.n	8001caa <HAL_RCC_OscConfig+0x142>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c9a:	6863      	ldr	r3, [r4, #4]
 8001c9c:	f003 030c 	and.w	r3, r3, #12
 8001ca0:	2b08      	cmp	r3, #8
 8001ca2:	d122      	bne.n	8001cea <HAL_RCC_OscConfig+0x182>
 8001ca4:	6863      	ldr	r3, [r4, #4]
 8001ca6:	03de      	lsls	r6, r3, #15
 8001ca8:	d41f      	bmi.n	8001cea <HAL_RCC_OscConfig+0x182>
 8001caa:	2302      	movs	r3, #2
 8001cac:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cb0:	6821      	ldr	r1, [r4, #0]
 8001cb2:	fa93 f3a3 	rbit	r3, r3
 8001cb6:	fab3 f383 	clz	r3, r3
 8001cba:	f003 031f 	and.w	r3, r3, #31
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	420b      	tst	r3, r1
 8001cc6:	d003      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x168>
 8001cc8:	692b      	ldr	r3, [r5, #16]
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	f47f af50 	bne.w	8001b70 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd0:	6821      	ldr	r1, [r4, #0]
 8001cd2:	23f8      	movs	r3, #248	; 0xf8
 8001cd4:	fa93 f3a3 	rbit	r3, r3
 8001cd8:	fab3 f283 	clz	r2, r3
 8001cdc:	696b      	ldr	r3, [r5, #20]
 8001cde:	4093      	lsls	r3, r2
 8001ce0:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	6023      	str	r3, [r4, #0]
 8001ce8:	e74b      	b.n	8001b82 <HAL_RCC_OscConfig+0x1a>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cea:	692a      	ldr	r2, [r5, #16]
 8001cec:	2601      	movs	r6, #1
 8001cee:	b30a      	cbz	r2, 8001d34 <HAL_RCC_OscConfig+0x1cc>
 8001cf0:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8001cf4:	fab3 f383 	clz	r3, r3
 8001cf8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cfc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	2702      	movs	r7, #2
 8001d04:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8001d06:	f7fe ff29 	bl	8000b5c <HAL_GetTick>
 8001d0a:	4680      	mov	r8, r0
 8001d0c:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d10:	6822      	ldr	r2, [r4, #0]
 8001d12:	fa97 f3a7 	rbit	r3, r7
 8001d16:	fab3 f383 	clz	r3, r3
 8001d1a:	f003 031f 	and.w	r3, r3, #31
 8001d1e:	fa06 f303 	lsl.w	r3, r6, r3
 8001d22:	4213      	tst	r3, r2
 8001d24:	d1d4      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x168>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d26:	f7fe ff19 	bl	8000b5c <HAL_GetTick>
 8001d2a:	eba0 0008 	sub.w	r0, r0, r8
 8001d2e:	2802      	cmp	r0, #2
 8001d30:	d9ec      	bls.n	8001d0c <HAL_RCC_OscConfig+0x1a4>
 8001d32:	e77e      	b.n	8001c32 <HAL_RCC_OscConfig+0xca>
 8001d34:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8001d38:	fab3 f383 	clz	r3, r3
 8001d3c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d40:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	2702      	movs	r7, #2
 8001d48:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001d4a:	f7fe ff07 	bl	8000b5c <HAL_GetTick>
 8001d4e:	4680      	mov	r8, r0
 8001d50:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d54:	6822      	ldr	r2, [r4, #0]
 8001d56:	fa97 f3a7 	rbit	r3, r7
 8001d5a:	fab3 f383 	clz	r3, r3
 8001d5e:	f003 031f 	and.w	r3, r3, #31
 8001d62:	fa06 f303 	lsl.w	r3, r6, r3
 8001d66:	4213      	tst	r3, r2
 8001d68:	f43f af0b 	beq.w	8001b82 <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d6c:	f7fe fef6 	bl	8000b5c <HAL_GetTick>
 8001d70:	eba0 0008 	sub.w	r0, r0, r8
 8001d74:	2802      	cmp	r0, #2
 8001d76:	d9eb      	bls.n	8001d50 <HAL_RCC_OscConfig+0x1e8>
 8001d78:	e75b      	b.n	8001c32 <HAL_RCC_OscConfig+0xca>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d7a:	69aa      	ldr	r2, [r5, #24]
 8001d7c:	4e43      	ldr	r6, [pc, #268]	; (8001e8c <HAL_RCC_OscConfig+0x324>)
 8001d7e:	4944      	ldr	r1, [pc, #272]	; (8001e90 <HAL_RCC_OscConfig+0x328>)
 8001d80:	2401      	movs	r4, #1
 8001d82:	b31a      	cbz	r2, 8001dcc <HAL_RCC_OscConfig+0x264>
 8001d84:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8001d88:	fab3 f383 	clz	r3, r3
 8001d8c:	440b      	add	r3, r1
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	2702      	movs	r7, #2
 8001d92:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8001d94:	f7fe fee2 	bl	8000b5c <HAL_GetTick>
 8001d98:	4680      	mov	r8, r0
 8001d9a:	fa97 f3a7 	rbit	r3, r7
 8001d9e:	fa97 f3a7 	rbit	r3, r7
 8001da2:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001da6:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001da8:	fa97 f3a7 	rbit	r3, r7
 8001dac:	fab3 f383 	clz	r3, r3
 8001db0:	f003 031f 	and.w	r3, r3, #31
 8001db4:	fa04 f303 	lsl.w	r3, r4, r3
 8001db8:	4213      	tst	r3, r2
 8001dba:	f47f aee6 	bne.w	8001b8a <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dbe:	f7fe fecd 	bl	8000b5c <HAL_GetTick>
 8001dc2:	eba0 0008 	sub.w	r0, r0, r8
 8001dc6:	2802      	cmp	r0, #2
 8001dc8:	d9e7      	bls.n	8001d9a <HAL_RCC_OscConfig+0x232>
 8001dca:	e732      	b.n	8001c32 <HAL_RCC_OscConfig+0xca>
 8001dcc:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8001dd0:	fab3 f383 	clz	r3, r3
 8001dd4:	440b      	add	r3, r1
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	2702      	movs	r7, #2
 8001dda:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001ddc:	f7fe febe 	bl	8000b5c <HAL_GetTick>
 8001de0:	4680      	mov	r8, r0
 8001de2:	fa97 f3a7 	rbit	r3, r7
 8001de6:	fa97 f3a7 	rbit	r3, r7
 8001dea:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dee:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001df0:	fa97 f3a7 	rbit	r3, r7
 8001df4:	fab3 f383 	clz	r3, r3
 8001df8:	f003 031f 	and.w	r3, r3, #31
 8001dfc:	fa04 f303 	lsl.w	r3, r4, r3
 8001e00:	4213      	tst	r3, r2
 8001e02:	f43f aec2 	beq.w	8001b8a <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e06:	f7fe fea9 	bl	8000b5c <HAL_GetTick>
 8001e0a:	eba0 0008 	sub.w	r0, r0, r8
 8001e0e:	2802      	cmp	r0, #2
 8001e10:	d9e7      	bls.n	8001de2 <HAL_RCC_OscConfig+0x27a>
 8001e12:	e70e      	b.n	8001c32 <HAL_RCC_OscConfig+0xca>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e14:	4c1d      	ldr	r4, [pc, #116]	; (8001e8c <HAL_RCC_OscConfig+0x324>)
 8001e16:	69e3      	ldr	r3, [r4, #28]
 8001e18:	00d9      	lsls	r1, r3, #3
 8001e1a:	d434      	bmi.n	8001e86 <HAL_RCC_OscConfig+0x31e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e1c:	69e3      	ldr	r3, [r4, #28]
 8001e1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e22:	61e3      	str	r3, [r4, #28]
 8001e24:	69e3      	ldr	r3, [r4, #28]
 8001e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e2a:	9301      	str	r3, [sp, #4]
 8001e2c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001e2e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e30:	4f18      	ldr	r7, [pc, #96]	; (8001e94 <HAL_RCC_OscConfig+0x32c>)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	05da      	lsls	r2, r3, #23
 8001e36:	d52f      	bpl.n	8001e98 <HAL_RCC_OscConfig+0x330>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e38:	68eb      	ldr	r3, [r5, #12]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d13d      	bne.n	8001eba <HAL_RCC_OscConfig+0x352>
 8001e3e:	6a23      	ldr	r3, [r4, #32]
 8001e40:	f043 0301 	orr.w	r3, r3, #1
 8001e44:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001e46:	f7fe fe89 	bl	8000b5c <HAL_GetTick>
 8001e4a:	2702      	movs	r7, #2
 8001e4c:	4682      	mov	sl, r0
 8001e4e:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e50:	f04f 0801 	mov.w	r8, #1
 8001e54:	fa97 f3a7 	rbit	r3, r7
 8001e58:	fa97 f3a7 	rbit	r3, r7
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d06c      	beq.n	8001f3a <HAL_RCC_OscConfig+0x3d2>
 8001e60:	6a22      	ldr	r2, [r4, #32]
 8001e62:	fa99 f3a9 	rbit	r3, r9
 8001e66:	fab3 f383 	clz	r3, r3
 8001e6a:	f003 031f 	and.w	r3, r3, #31
 8001e6e:	fa08 f303 	lsl.w	r3, r8, r3
 8001e72:	4213      	tst	r3, r2
 8001e74:	d058      	beq.n	8001f28 <HAL_RCC_OscConfig+0x3c0>
    if(pwrclkchanged == SET)
 8001e76:	2e00      	cmp	r6, #0
 8001e78:	f43f ae8b 	beq.w	8001b92 <HAL_RCC_OscConfig+0x2a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e7c:	69e3      	ldr	r3, [r4, #28]
 8001e7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e82:	61e3      	str	r3, [r4, #28]
 8001e84:	e685      	b.n	8001b92 <HAL_RCC_OscConfig+0x2a>
    FlagStatus       pwrclkchanged = RESET;
 8001e86:	2600      	movs	r6, #0
 8001e88:	e7d2      	b.n	8001e30 <HAL_RCC_OscConfig+0x2c8>
 8001e8a:	bf00      	nop
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	10908120 	.word	0x10908120
 8001e94:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e9e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001ea0:	f7fe fe5c 	bl	8000b5c <HAL_GetTick>
 8001ea4:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	05db      	lsls	r3, r3, #23
 8001eaa:	d4c5      	bmi.n	8001e38 <HAL_RCC_OscConfig+0x2d0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eac:	f7fe fe56 	bl	8000b5c <HAL_GetTick>
 8001eb0:	eba0 0008 	sub.w	r0, r0, r8
 8001eb4:	2864      	cmp	r0, #100	; 0x64
 8001eb6:	d9f6      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x33e>
 8001eb8:	e6bb      	b.n	8001c32 <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eba:	bb3b      	cbnz	r3, 8001f0c <HAL_RCC_OscConfig+0x3a4>
 8001ebc:	6a23      	ldr	r3, [r4, #32]
 8001ebe:	f023 0301 	bic.w	r3, r3, #1
 8001ec2:	6223      	str	r3, [r4, #32]
 8001ec4:	6a23      	ldr	r3, [r4, #32]
 8001ec6:	f023 0304 	bic.w	r3, r3, #4
 8001eca:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001ecc:	f7fe fe46 	bl	8000b5c <HAL_GetTick>
 8001ed0:	2702      	movs	r7, #2
 8001ed2:	4682      	mov	sl, r0
 8001ed4:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ed6:	f04f 0801 	mov.w	r8, #1
 8001eda:	fa97 f3a7 	rbit	r3, r7
 8001ede:	fa97 f3a7 	rbit	r3, r7
 8001ee2:	b373      	cbz	r3, 8001f42 <HAL_RCC_OscConfig+0x3da>
 8001ee4:	6a22      	ldr	r2, [r4, #32]
 8001ee6:	fa99 f3a9 	rbit	r3, r9
 8001eea:	fab3 f383 	clz	r3, r3
 8001eee:	f003 031f 	and.w	r3, r3, #31
 8001ef2:	fa08 f303 	lsl.w	r3, r8, r3
 8001ef6:	4213      	tst	r3, r2
 8001ef8:	d0bd      	beq.n	8001e76 <HAL_RCC_OscConfig+0x30e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001efa:	f7fe fe2f 	bl	8000b5c <HAL_GetTick>
 8001efe:	f241 3388 	movw	r3, #5000	; 0x1388
 8001f02:	eba0 000a 	sub.w	r0, r0, sl
 8001f06:	4298      	cmp	r0, r3
 8001f08:	d9e7      	bls.n	8001eda <HAL_RCC_OscConfig+0x372>
 8001f0a:	e692      	b.n	8001c32 <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f0c:	2b05      	cmp	r3, #5
 8001f0e:	6a23      	ldr	r3, [r4, #32]
 8001f10:	d103      	bne.n	8001f1a <HAL_RCC_OscConfig+0x3b2>
 8001f12:	f043 0304 	orr.w	r3, r3, #4
 8001f16:	6223      	str	r3, [r4, #32]
 8001f18:	e791      	b.n	8001e3e <HAL_RCC_OscConfig+0x2d6>
 8001f1a:	f023 0301 	bic.w	r3, r3, #1
 8001f1e:	6223      	str	r3, [r4, #32]
 8001f20:	6a23      	ldr	r3, [r4, #32]
 8001f22:	f023 0304 	bic.w	r3, r3, #4
 8001f26:	e78d      	b.n	8001e44 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f28:	f7fe fe18 	bl	8000b5c <HAL_GetTick>
 8001f2c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001f30:	eba0 000a 	sub.w	r0, r0, sl
 8001f34:	4298      	cmp	r0, r3
 8001f36:	d98d      	bls.n	8001e54 <HAL_RCC_OscConfig+0x2ec>
 8001f38:	e67b      	b.n	8001c32 <HAL_RCC_OscConfig+0xca>
 8001f3a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f3e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001f40:	e78f      	b.n	8001e62 <HAL_RCC_OscConfig+0x2fa>
 8001f42:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f46:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001f48:	e7cd      	b.n	8001ee6 <HAL_RCC_OscConfig+0x37e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f4a:	4b4a      	ldr	r3, [pc, #296]	; (8002074 <HAL_RCC_OscConfig+0x50c>)
 8001f4c:	685a      	ldr	r2, [r3, #4]
 8001f4e:	f002 020c 	and.w	r2, r2, #12
 8001f52:	2a08      	cmp	r2, #8
 8001f54:	461c      	mov	r4, r3
 8001f56:	d07b      	beq.n	8002050 <HAL_RCC_OscConfig+0x4e8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f58:	2802      	cmp	r0, #2
 8001f5a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f5e:	d152      	bne.n	8002006 <HAL_RCC_OscConfig+0x49e>
 8001f60:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001f64:	fab3 f383 	clz	r3, r3
 8001f68:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f6c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	2200      	movs	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001f76:	f7fe fdf1 	bl	8000b5c <HAL_GetTick>
 8001f7a:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8001f7e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f80:	2601      	movs	r6, #1
 8001f82:	fa97 f3a7 	rbit	r3, r7
 8001f86:	6822      	ldr	r2, [r4, #0]
 8001f88:	fa97 f3a7 	rbit	r3, r7
 8001f8c:	fab3 f383 	clz	r3, r3
 8001f90:	f003 031f 	and.w	r3, r3, #31
 8001f94:	fa06 f303 	lsl.w	r3, r6, r3
 8001f98:	4213      	tst	r3, r2
 8001f9a:	d12d      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x490>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f9c:	6862      	ldr	r2, [r4, #4]
 8001f9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001fa0:	6a29      	ldr	r1, [r5, #32]
 8001fa2:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001fa6:	430b      	orrs	r3, r1
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	6063      	str	r3, [r4, #4]
 8001fac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fb0:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001fb4:	fab3 f383 	clz	r3, r3
 8001fb8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fbc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001fc6:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8001fc8:	f7fe fdc8 	bl	8000b5c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fcc:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 8001fce:	4607      	mov	r7, r0
 8001fd0:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fd4:	6822      	ldr	r2, [r4, #0]
 8001fd6:	fa95 f3a5 	rbit	r3, r5
 8001fda:	fab3 f383 	clz	r3, r3
 8001fde:	f003 031f 	and.w	r3, r3, #31
 8001fe2:	fa06 f303 	lsl.w	r3, r6, r3
 8001fe6:	4213      	tst	r3, r2
 8001fe8:	f47f add7 	bne.w	8001b9a <HAL_RCC_OscConfig+0x32>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fec:	f7fe fdb6 	bl	8000b5c <HAL_GetTick>
 8001ff0:	1bc0      	subs	r0, r0, r7
 8001ff2:	2802      	cmp	r0, #2
 8001ff4:	d9ec      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x468>
 8001ff6:	e61c      	b.n	8001c32 <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ff8:	f7fe fdb0 	bl	8000b5c <HAL_GetTick>
 8001ffc:	eba0 0008 	sub.w	r0, r0, r8
 8002000:	2802      	cmp	r0, #2
 8002002:	d9be      	bls.n	8001f82 <HAL_RCC_OscConfig+0x41a>
 8002004:	e615      	b.n	8001c32 <HAL_RCC_OscConfig+0xca>
 8002006:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800200a:	fab3 f383 	clz	r3, r3
 800200e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002012:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800201c:	f7fe fd9e 	bl	8000b5c <HAL_GetTick>
 8002020:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8002024:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002026:	2601      	movs	r6, #1
 8002028:	fa95 f3a5 	rbit	r3, r5
 800202c:	6822      	ldr	r2, [r4, #0]
 800202e:	fa95 f3a5 	rbit	r3, r5
 8002032:	fab3 f383 	clz	r3, r3
 8002036:	f003 031f 	and.w	r3, r3, #31
 800203a:	fa06 f303 	lsl.w	r3, r6, r3
 800203e:	4213      	tst	r3, r2
 8002040:	f43f adab 	beq.w	8001b9a <HAL_RCC_OscConfig+0x32>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002044:	f7fe fd8a 	bl	8000b5c <HAL_GetTick>
 8002048:	1bc0      	subs	r0, r0, r7
 800204a:	2802      	cmp	r0, #2
 800204c:	d9ec      	bls.n	8002028 <HAL_RCC_OscConfig+0x4c0>
 800204e:	e5f0      	b.n	8001c32 <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002050:	2801      	cmp	r0, #1
 8002052:	f43f adef 	beq.w	8001c34 <HAL_RCC_OscConfig+0xcc>
        pll_config = RCC->CFGR;
 8002056:	6858      	ldr	r0, [r3, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002058:	6a2b      	ldr	r3, [r5, #32]
 800205a:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 800205e:	429a      	cmp	r2, r3
 8002060:	f47f ad86 	bne.w	8001b70 <HAL_RCC_OscConfig+0x8>
 8002064:	6a6b      	ldr	r3, [r5, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002066:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 800206a:	1ac0      	subs	r0, r0, r3
 800206c:	bf18      	it	ne
 800206e:	2001      	movne	r0, #1
 8002070:	e5e0      	b.n	8001c34 <HAL_RCC_OscConfig+0xcc>
 8002072:	bf00      	nop
 8002074:	40021000 	.word	0x40021000

08002078 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002078:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 800207a:	4c13      	ldr	r4, [pc, #76]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x50>)
 800207c:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800207e:	f001 030c 	and.w	r3, r1, #12
 8002082:	2b08      	cmp	r3, #8
 8002084:	d11e      	bne.n	80020c4 <HAL_RCC_GetSysClockFreq+0x4c>
 8002086:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 800208a:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800208e:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 8002092:	fab3 f383 	clz	r3, r3
 8002096:	fa22 f303 	lsr.w	r3, r2, r3
 800209a:	4a0c      	ldr	r2, [pc, #48]	; (80020cc <HAL_RCC_GetSysClockFreq+0x54>)
 800209c:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800209e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80020a0:	220f      	movs	r2, #15
 80020a2:	fa92 f2a2 	rbit	r2, r2
 80020a6:	fab2 f282 	clz	r2, r2
 80020aa:	f003 030f 	and.w	r3, r3, #15
 80020ae:	40d3      	lsrs	r3, r2
 80020b0:	4a07      	ldr	r2, [pc, #28]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x58>)
 80020b2:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80020b4:	03cb      	lsls	r3, r1, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020b6:	bf4a      	itet	mi
 80020b8:	4b06      	ldrmi	r3, [pc, #24]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80020ba:	4b07      	ldrpl	r3, [pc, #28]	; (80020d8 <HAL_RCC_GetSysClockFreq+0x60>)
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020bc:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80020c0:	4358      	muls	r0, r3
 80020c2:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 80020c4:	4803      	ldr	r0, [pc, #12]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80020c6:	bd10      	pop	{r4, pc}
 80020c8:	40021000 	.word	0x40021000
 80020cc:	08002ed8 	.word	0x08002ed8
 80020d0:	08002ee8 	.word	0x08002ee8
 80020d4:	007a1200 	.word	0x007a1200
 80020d8:	003d0900 	.word	0x003d0900

080020dc <HAL_RCC_ClockConfig>:
{
 80020dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020e0:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80020e2:	4604      	mov	r4, r0
 80020e4:	b910      	cbnz	r0, 80020ec <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80020e6:	2001      	movs	r0, #1
 80020e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020ec:	4a4d      	ldr	r2, [pc, #308]	; (8002224 <HAL_RCC_ClockConfig+0x148>)
 80020ee:	6813      	ldr	r3, [r2, #0]
 80020f0:	f003 0307 	and.w	r3, r3, #7
 80020f4:	428b      	cmp	r3, r1
 80020f6:	d32f      	bcc.n	8002158 <HAL_RCC_ClockConfig+0x7c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020f8:	6822      	ldr	r2, [r4, #0]
 80020fa:	0791      	lsls	r1, r2, #30
 80020fc:	d437      	bmi.n	800216e <HAL_RCC_ClockConfig+0x92>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020fe:	07d2      	lsls	r2, r2, #31
 8002100:	d43d      	bmi.n	800217e <HAL_RCC_ClockConfig+0xa2>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002102:	4a48      	ldr	r2, [pc, #288]	; (8002224 <HAL_RCC_ClockConfig+0x148>)
 8002104:	6813      	ldr	r3, [r2, #0]
 8002106:	f003 0307 	and.w	r3, r3, #7
 800210a:	429d      	cmp	r5, r3
 800210c:	d376      	bcc.n	80021fc <HAL_RCC_ClockConfig+0x120>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800210e:	6822      	ldr	r2, [r4, #0]
 8002110:	4d45      	ldr	r5, [pc, #276]	; (8002228 <HAL_RCC_ClockConfig+0x14c>)
 8002112:	f012 0f04 	tst.w	r2, #4
 8002116:	d17d      	bne.n	8002214 <HAL_RCC_ClockConfig+0x138>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002118:	0713      	lsls	r3, r2, #28
 800211a:	d506      	bpl.n	800212a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800211c:	686b      	ldr	r3, [r5, #4]
 800211e:	6922      	ldr	r2, [r4, #16]
 8002120:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002124:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002128:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800212a:	f7ff ffa5 	bl	8002078 <HAL_RCC_GetSysClockFreq>
 800212e:	686b      	ldr	r3, [r5, #4]
 8002130:	22f0      	movs	r2, #240	; 0xf0
 8002132:	fa92 f2a2 	rbit	r2, r2
 8002136:	fab2 f282 	clz	r2, r2
 800213a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800213e:	40d3      	lsrs	r3, r2
 8002140:	4a3a      	ldr	r2, [pc, #232]	; (800222c <HAL_RCC_ClockConfig+0x150>)
 8002142:	5cd3      	ldrb	r3, [r2, r3]
 8002144:	40d8      	lsrs	r0, r3
 8002146:	4b3a      	ldr	r3, [pc, #232]	; (8002230 <HAL_RCC_ClockConfig+0x154>)
 8002148:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 800214a:	4b3a      	ldr	r3, [pc, #232]	; (8002234 <HAL_RCC_ClockConfig+0x158>)
 800214c:	6818      	ldr	r0, [r3, #0]
 800214e:	f7fe fcc3 	bl	8000ad8 <HAL_InitTick>
  return HAL_OK;
 8002152:	2000      	movs	r0, #0
 8002154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002158:	6813      	ldr	r3, [r2, #0]
 800215a:	f023 0307 	bic.w	r3, r3, #7
 800215e:	430b      	orrs	r3, r1
 8002160:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002162:	6813      	ldr	r3, [r2, #0]
 8002164:	f003 0307 	and.w	r3, r3, #7
 8002168:	4299      	cmp	r1, r3
 800216a:	d1bc      	bne.n	80020e6 <HAL_RCC_ClockConfig+0xa>
 800216c:	e7c4      	b.n	80020f8 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800216e:	492e      	ldr	r1, [pc, #184]	; (8002228 <HAL_RCC_ClockConfig+0x14c>)
 8002170:	68a0      	ldr	r0, [r4, #8]
 8002172:	684b      	ldr	r3, [r1, #4]
 8002174:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002178:	4303      	orrs	r3, r0
 800217a:	604b      	str	r3, [r1, #4]
 800217c:	e7bf      	b.n	80020fe <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800217e:	6862      	ldr	r2, [r4, #4]
 8002180:	4e29      	ldr	r6, [pc, #164]	; (8002228 <HAL_RCC_ClockConfig+0x14c>)
 8002182:	2a01      	cmp	r2, #1
 8002184:	d127      	bne.n	80021d6 <HAL_RCC_ClockConfig+0xfa>
 8002186:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800218a:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800218e:	6831      	ldr	r1, [r6, #0]
 8002190:	fa93 f3a3 	rbit	r3, r3
 8002194:	fab3 f383 	clz	r3, r3
 8002198:	f003 031f 	and.w	r3, r3, #31
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a2:	d0a0      	beq.n	80020e6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021a4:	6873      	ldr	r3, [r6, #4]
 80021a6:	f023 0303 	bic.w	r3, r3, #3
 80021aa:	431a      	orrs	r2, r3
 80021ac:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 80021ae:	f7fe fcd5 	bl	8000b5c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021b2:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80021b6:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021b8:	6873      	ldr	r3, [r6, #4]
 80021ba:	6862      	ldr	r2, [r4, #4]
 80021bc:	f003 030c 	and.w	r3, r3, #12
 80021c0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80021c4:	d09d      	beq.n	8002102 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021c6:	f7fe fcc9 	bl	8000b5c <HAL_GetTick>
 80021ca:	1bc0      	subs	r0, r0, r7
 80021cc:	4540      	cmp	r0, r8
 80021ce:	d9f3      	bls.n	80021b8 <HAL_RCC_ClockConfig+0xdc>
        return HAL_TIMEOUT;
 80021d0:	2003      	movs	r0, #3
}
 80021d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021d6:	2a02      	cmp	r2, #2
 80021d8:	bf0c      	ite	eq
 80021da:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 80021de:	2302      	movne	r3, #2
 80021e0:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e4:	6830      	ldr	r0, [r6, #0]
 80021e6:	fa93 f3a3 	rbit	r3, r3
 80021ea:	fab3 f383 	clz	r3, r3
 80021ee:	f003 031f 	and.w	r3, r3, #31
 80021f2:	2101      	movs	r1, #1
 80021f4:	fa01 f303 	lsl.w	r3, r1, r3
 80021f8:	4203      	tst	r3, r0
 80021fa:	e7d2      	b.n	80021a2 <HAL_RCC_ClockConfig+0xc6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021fc:	6813      	ldr	r3, [r2, #0]
 80021fe:	f023 0307 	bic.w	r3, r3, #7
 8002202:	432b      	orrs	r3, r5
 8002204:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002206:	6813      	ldr	r3, [r2, #0]
 8002208:	f003 0307 	and.w	r3, r3, #7
 800220c:	429d      	cmp	r5, r3
 800220e:	f47f af6a 	bne.w	80020e6 <HAL_RCC_ClockConfig+0xa>
 8002212:	e77c      	b.n	800210e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002214:	686b      	ldr	r3, [r5, #4]
 8002216:	68e1      	ldr	r1, [r4, #12]
 8002218:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800221c:	430b      	orrs	r3, r1
 800221e:	606b      	str	r3, [r5, #4]
 8002220:	e77a      	b.n	8002118 <HAL_RCC_ClockConfig+0x3c>
 8002222:	bf00      	nop
 8002224:	40022000 	.word	0x40022000
 8002228:	40021000 	.word	0x40021000
 800222c:	08002ef8 	.word	0x08002ef8
 8002230:	20000008 	.word	0x20000008
 8002234:	20000004 	.word	0x20000004

08002238 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002238:	6803      	ldr	r3, [r0, #0]
{
 800223a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800223e:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002240:	03d8      	lsls	r0, r3, #15
 8002242:	d520      	bpl.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002244:	4c50      	ldr	r4, [pc, #320]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002246:	69e3      	ldr	r3, [r4, #28]
 8002248:	00d9      	lsls	r1, r3, #3
 800224a:	d444      	bmi.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800224c:	69e3      	ldr	r3, [r4, #28]
 800224e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002252:	61e3      	str	r3, [r4, #28]
 8002254:	69e3      	ldr	r3, [r4, #28]
 8002256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800225a:	9301      	str	r3, [sp, #4]
 800225c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800225e:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002260:	4f4a      	ldr	r7, [pc, #296]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	05da      	lsls	r2, r3, #23
 8002266:	d538      	bpl.n	80022da <HAL_RCCEx_PeriphCLKConfig+0xa2>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002268:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800226a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800226e:	d148      	bne.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0xca>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002270:	6a23      	ldr	r3, [r4, #32]
 8002272:	686a      	ldr	r2, [r5, #4]
 8002274:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002278:	4313      	orrs	r3, r2
 800227a:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800227c:	b11e      	cbz	r6, 8002286 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800227e:	69e3      	ldr	r3, [r4, #28]
 8002280:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002284:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002286:	6828      	ldr	r0, [r5, #0]
 8002288:	07c1      	lsls	r1, r0, #31
 800228a:	d506      	bpl.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800228c:	4a3e      	ldr	r2, [pc, #248]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800228e:	68a9      	ldr	r1, [r5, #8]
 8002290:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002292:	f023 0303 	bic.w	r3, r3, #3
 8002296:	430b      	orrs	r3, r1
 8002298:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800229a:	0682      	lsls	r2, r0, #26
 800229c:	d506      	bpl.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800229e:	4a3a      	ldr	r2, [pc, #232]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80022a0:	68e9      	ldr	r1, [r5, #12]
 80022a2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80022a4:	f023 0310 	bic.w	r3, r3, #16
 80022a8:	430b      	orrs	r3, r1
 80022aa:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80022ac:	0603      	lsls	r3, r0, #24
 80022ae:	d506      	bpl.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80022b0:	4a35      	ldr	r2, [pc, #212]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80022b2:	6929      	ldr	r1, [r5, #16]
 80022b4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80022b6:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 80022ba:	430b      	orrs	r3, r1
 80022bc:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80022be:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 80022c2:	d01b      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80022c4:	4a30      	ldr	r2, [pc, #192]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80022c6:	6969      	ldr	r1, [r5, #20]
 80022c8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80022ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022ce:	430b      	orrs	r3, r1
 80022d0:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80022d2:	2000      	movs	r0, #0
 80022d4:	e012      	b.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    FlagStatus       pwrclkchanged = RESET;
 80022d6:	2600      	movs	r6, #0
 80022d8:	e7c2      	b.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022e0:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80022e2:	f7fe fc3b 	bl	8000b5c <HAL_GetTick>
 80022e6:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	05db      	lsls	r3, r3, #23
 80022ec:	d4bc      	bmi.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x30>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ee:	f7fe fc35 	bl	8000b5c <HAL_GetTick>
 80022f2:	eba0 0008 	sub.w	r0, r0, r8
 80022f6:	2864      	cmp	r0, #100	; 0x64
 80022f8:	d9f6      	bls.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0xb0>
          return HAL_TIMEOUT;
 80022fa:	2003      	movs	r0, #3
}
 80022fc:	b002      	add	sp, #8
 80022fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002302:	686a      	ldr	r2, [r5, #4]
 8002304:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002308:	4293      	cmp	r3, r2
 800230a:	d0b1      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x38>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800230c:	6a21      	ldr	r1, [r4, #32]
 800230e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002312:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8002316:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 800231a:	f8df e074 	ldr.w	lr, [pc, #116]	; 8002390 <HAL_RCCEx_PeriphCLKConfig+0x158>
 800231e:	fab2 f282 	clz	r2, r2
 8002322:	4472      	add	r2, lr
 8002324:	0092      	lsls	r2, r2, #2
 8002326:	2701      	movs	r7, #1
 8002328:	6017      	str	r7, [r2, #0]
 800232a:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 800232e:	fab3 f383 	clz	r3, r3
 8002332:	4473      	add	r3, lr
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	2200      	movs	r2, #0
 8002338:	601a      	str	r2, [r3, #0]
      RCC->BDCR = temp_reg;
 800233a:	6220      	str	r0, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800233c:	07c8      	lsls	r0, r1, #31
 800233e:	d597      	bpl.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8002340:	f7fe fc0c 	bl	8000b5c <HAL_GetTick>
 8002344:	f04f 0802 	mov.w	r8, #2
 8002348:	4682      	mov	sl, r0
 800234a:	46c1      	mov	r9, r8
 800234c:	fa98 f3a8 	rbit	r3, r8
 8002350:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002354:	b19b      	cbz	r3, 800237e <HAL_RCCEx_PeriphCLKConfig+0x146>
 8002356:	6a22      	ldr	r2, [r4, #32]
 8002358:	fa99 f3a9 	rbit	r3, r9
 800235c:	fab3 f383 	clz	r3, r3
 8002360:	f003 031f 	and.w	r3, r3, #31
 8002364:	fa07 f303 	lsl.w	r3, r7, r3
 8002368:	4213      	tst	r3, r2
 800236a:	d181      	bne.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x38>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800236c:	f7fe fbf6 	bl	8000b5c <HAL_GetTick>
 8002370:	f241 3388 	movw	r3, #5000	; 0x1388
 8002374:	eba0 000a 	sub.w	r0, r0, sl
 8002378:	4298      	cmp	r0, r3
 800237a:	d9e7      	bls.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x114>
 800237c:	e7bd      	b.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0xc2>
 800237e:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002382:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002384:	e7e8      	b.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x120>
 8002386:	bf00      	nop
 8002388:	40021000 	.word	0x40021000
 800238c:	40007000 	.word	0x40007000
 8002390:	10908100 	.word	0x10908100
 8002394:	00000000 	.word	0x00000000

08002398 <sampToTemp>:
	{
		Error_Handler();
	}
}

void sampToTemp(){
 8002398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	double temp;
	for(int i=0;i<4;i++){
		double volt = ((double)ADC1_BUF[i]/4096)*3.3;
 800239c:	a71e      	add	r7, pc, #120	; (adr r7, 8002418 <sampToTemp+0x80>)
 800239e:	e9d7 6700 	ldrd	r6, r7, [r7]
		double lanVolt = log(volt);
		temp = -30.66*lanVolt+0.72;
 80023a2:	a51f      	add	r5, pc, #124	; (adr r5, 8002420 <sampToTemp+0x88>)
 80023a4:	e9d5 4500 	ldrd	r4, r5, [r5]
		double volt = ((double)ADC1_BUF[i]/4096)*3.3;
 80023a8:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8002428 <sampToTemp+0x90>
	for(int i=0;i<4;i++){
 80023ac:	f04f 0a00 	mov.w	sl, #0
		double volt = ((double)ADC1_BUF[i]/4096)*3.3;
 80023b0:	f04f 0800 	mov.w	r8, #0
 80023b4:	4b16      	ldr	r3, [pc, #88]	; (8002410 <sampToTemp+0x78>)
 80023b6:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80023ba:	f7fe f847 	bl	800044c <__aeabi_ui2d>
 80023be:	4642      	mov	r2, r8
 80023c0:	464b      	mov	r3, r9
 80023c2:	f7fe f8b9 	bl	8000538 <__aeabi_dmul>
 80023c6:	4632      	mov	r2, r6
 80023c8:	463b      	mov	r3, r7
 80023ca:	f7fe f8b5 	bl	8000538 <__aeabi_dmul>
		double lanVolt = log(volt);
 80023ce:	ec41 0b10 	vmov	d0, r0, r1
 80023d2:	f000 fb11 	bl	80029f8 <log>
		temp = -30.66*lanVolt+0.72;
 80023d6:	4622      	mov	r2, r4
 80023d8:	ec51 0b10 	vmov	r0, r1, d0
 80023dc:	462b      	mov	r3, r5
 80023de:	f7fe f8ab 	bl	8000538 <__aeabi_dmul>
 80023e2:	a309      	add	r3, pc, #36	; (adr r3, 8002408 <sampToTemp+0x70>)
 80023e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e8:	f7fd fef4 	bl	80001d4 <__adddf3>
		message[i] = (uint8_t)(temp);
 80023ec:	f7fe fb54 	bl	8000a98 <__aeabi_d2uiz>
 80023f0:	4b08      	ldr	r3, [pc, #32]	; (8002414 <sampToTemp+0x7c>)
 80023f2:	f803 000a 	strb.w	r0, [r3, sl]
	for(int i=0;i<4;i++){
 80023f6:	f10a 0a01 	add.w	sl, sl, #1
 80023fa:	f1ba 0f04 	cmp.w	sl, #4
 80023fe:	d1d9      	bne.n	80023b4 <sampToTemp+0x1c>
		if(message[i]>=maxTemp){
			//tempOutOfBoundsMessage(); * OFF FOR DEBUG *
		}
	}
}
 8002400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002404:	f3af 8000 	nop.w
 8002408:	70a3d70a 	.word	0x70a3d70a
 800240c:	3fe70a3d 	.word	0x3fe70a3d
 8002410:	20000110 	.word	0x20000110
 8002414:	20000120 	.word	0x20000120
 8002418:	66666666 	.word	0x66666666
 800241c:	400a6666 	.word	0x400a6666
 8002420:	c28f5c29 	.word	0xc28f5c29
 8002424:	c03ea8f5 	.word	0xc03ea8f5
 8002428:	3f300000 	.word	0x3f300000
 800242c:	00000000 	.word	0x00000000

08002430 <sampToVolt>:


void sampToVolt(){
 8002430:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	double volt = 0;
	double batteryVolt = 0;
	for(int i=0;i<4;i++){
		volt = ((double)ADC2_BUF[i]/4096)*3.3;
 8002434:	a714      	add	r7, pc, #80	; (adr r7, 8002488 <sampToVolt+0x58>)
 8002436:	e9d7 6700 	ldrd	r6, r7, [r7]
		batteryVolt = volt*6.1; //in the current circuit R=510 but (hens 6.1) but in final.V it will be 6.
		message[i+4] = (uint8_t)batteryVolt*10;
 800243a:	f8df b05c 	ldr.w	fp, [pc, #92]	; 8002498 <sampToVolt+0x68>
		volt = ((double)ADC2_BUF[i]/4096)*3.3;
 800243e:	f8df a05c 	ldr.w	sl, [pc, #92]	; 800249c <sampToVolt+0x6c>
 8002442:	f8df 905c 	ldr.w	r9, [pc, #92]	; 80024a0 <sampToVolt+0x70>
	for(int i=0;i<4;i++){
 8002446:	2400      	movs	r4, #0
		volt = ((double)ADC2_BUF[i]/4096)*3.3;
 8002448:	f04f 0800 	mov.w	r8, #0
 800244c:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
 8002450:	f7fd fffc 	bl	800044c <__aeabi_ui2d>
 8002454:	4642      	mov	r2, r8
 8002456:	464b      	mov	r3, r9
 8002458:	f7fe f86e 	bl	8000538 <__aeabi_dmul>
 800245c:	4632      	mov	r2, r6
 800245e:	463b      	mov	r3, r7
 8002460:	f7fe f86a 	bl	8000538 <__aeabi_dmul>
		batteryVolt = volt*6.1; //in the current circuit R=510 but (hens 6.1) but in final.V it will be 6.
 8002464:	a30a      	add	r3, pc, #40	; (adr r3, 8002490 <sampToVolt+0x60>)
 8002466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800246a:	f7fe f865 	bl	8000538 <__aeabi_dmul>
		message[i+4] = (uint8_t)batteryVolt*10;
 800246e:	f7fe fb13 	bl	8000a98 <__aeabi_d2uiz>
 8002472:	eb04 050b 	add.w	r5, r4, fp
 8002476:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	for(int i=0;i<4;i++){
 800247a:	3401      	adds	r4, #1
		message[i+4] = (uint8_t)batteryVolt*10;
 800247c:	0040      	lsls	r0, r0, #1
	for(int i=0;i<4;i++){
 800247e:	2c04      	cmp	r4, #4
		message[i+4] = (uint8_t)batteryVolt*10;
 8002480:	7128      	strb	r0, [r5, #4]
	for(int i=0;i<4;i++){
 8002482:	d1e3      	bne.n	800244c <sampToVolt+0x1c>
		if(message[i+4]<=minVolt){
			//voltOutOfBoundsMessage(); * OFF FOR DEBUG *
		}
	}
}
 8002484:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002488:	66666666 	.word	0x66666666
 800248c:	400a6666 	.word	0x400a6666
 8002490:	66666666 	.word	0x66666666
 8002494:	40186666 	.word	0x40186666
 8002498:	20000120 	.word	0x20000120
 800249c:	20000178 	.word	0x20000178
 80024a0:	3f300000 	.word	0x3f300000

080024a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024a4:	b500      	push	{lr}
 80024a6:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024a8:	2228      	movs	r2, #40	; 0x28
 80024aa:	2100      	movs	r1, #0
 80024ac:	a80c      	add	r0, sp, #48	; 0x30
 80024ae:	f000 fa9b 	bl	80029e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024b2:	2214      	movs	r2, #20
 80024b4:	2100      	movs	r1, #0
 80024b6:	a801      	add	r0, sp, #4
 80024b8:	f000 fa96 	bl	80029e8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024bc:	2218      	movs	r2, #24
 80024be:	2100      	movs	r1, #0
 80024c0:	eb0d 0002 	add.w	r0, sp, r2
 80024c4:	f000 fa90 	bl	80029e8 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80024c8:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024ca:	2201      	movs	r2, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80024cc:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024ce:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024d0:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024d2:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80024d4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024d8:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024da:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80024dc:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024de:	f7ff fb43 	bl	8001b68 <HAL_RCC_OscConfig>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80024e2:	2100      	movs	r1, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024e4:	230f      	movs	r3, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80024e6:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024e8:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80024ea:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024ec:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80024ee:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024f0:	9105      	str	r1, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80024f2:	f7ff fdf3 	bl	80020dc <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80024f6:	2380      	movs	r3, #128	; 0x80
 80024f8:	9306      	str	r3, [sp, #24]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024fa:	a806      	add	r0, sp, #24
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80024fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002500:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002502:	f7ff fe99 	bl	8002238 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8002506:	b017      	add	sp, #92	; 0x5c
 8002508:	f85d fb04 	ldr.w	pc, [sp], #4

0800250c <main>:
{
 800250c:	b580      	push	{r7, lr}
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800250e:	4d7f      	ldr	r5, [pc, #508]	; (800270c <main+0x200>)
  hadc2.Instance = ADC2;
 8002510:	4e7f      	ldr	r6, [pc, #508]	; (8002710 <main+0x204>)
{
 8002512:	b08c      	sub	sp, #48	; 0x30
  HAL_Init();
 8002514:	f7fe fb04 	bl	8000b20 <HAL_Init>
  SystemClock_Config();
 8002518:	f7ff ffc4 	bl	80024a4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800251c:	2214      	movs	r2, #20
 800251e:	2100      	movs	r1, #0
 8002520:	a806      	add	r0, sp, #24
 8002522:	f000 fa61 	bl	80029e8 <memset>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002526:	696b      	ldr	r3, [r5, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 8002528:	487a      	ldr	r0, [pc, #488]	; (8002714 <main+0x208>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800252a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800252e:	616b      	str	r3, [r5, #20]
 8002530:	696b      	ldr	r3, [r5, #20]
 8002532:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002536:	9301      	str	r3, [sp, #4]
 8002538:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800253a:	696b      	ldr	r3, [r5, #20]
 800253c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002540:	616b      	str	r3, [r5, #20]
 8002542:	696b      	ldr	r3, [r5, #20]
 8002544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 8002548:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800254a:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 800254c:	2101      	movs	r1, #1

  /*Configure GPIO pin : PF0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254e:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002550:	2701      	movs	r7, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002552:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 8002554:	f7ff fb02 	bl	8001b5c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002558:	a906      	add	r1, sp, #24
 800255a:	486e      	ldr	r0, [pc, #440]	; (8002714 <main+0x208>)
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800255c:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800255e:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002560:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002562:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002564:	f7ff fa40 	bl	80019e8 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002568:	696b      	ldr	r3, [r5, #20]
 800256a:	433b      	orrs	r3, r7
 800256c:	616b      	str	r3, [r5, #20]
 800256e:	696b      	ldr	r3, [r5, #20]
  hadc1.Instance = ADC1;
 8002570:	4d69      	ldr	r5, [pc, #420]	; (8002718 <main+0x20c>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002572:	403b      	ands	r3, r7
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002574:	4622      	mov	r2, r4
 8002576:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002578:	9300      	str	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800257a:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 800257c:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800257e:	f7ff f925 	bl	80017cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002582:	200b      	movs	r0, #11
 8002584:	f7ff f956 	bl	8001834 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002588:	4622      	mov	r2, r4
 800258a:	4621      	mov	r1, r4
 800258c:	200c      	movs	r0, #12
 800258e:	f7ff f91d 	bl	80017cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002592:	200c      	movs	r0, #12
 8002594:	f7ff f94e 	bl	8001834 <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 8002598:	2218      	movs	r2, #24
 800259a:	eb0d 0002 	add.w	r0, sp, r2
 800259e:	4621      	mov	r1, r4
  hadc1.Init.NbrOfConversion = 4;
 80025a0:	f04f 0804 	mov.w	r8, #4
  ADC_MultiModeTypeDef multimode = {0};
 80025a4:	9403      	str	r4, [sp, #12]
 80025a6:	9404      	str	r4, [sp, #16]
 80025a8:	9405      	str	r4, [sp, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80025aa:	f000 fa1d 	bl	80029e8 <memset>
  hadc1.Instance = ADC1;
 80025ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80025b2:	4628      	mov	r0, r5
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80025b4:	e885 0018 	stmia.w	r5, {r3, r4}
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80025b8:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80025ba:	612f      	str	r7, [r5, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80025bc:	766f      	strb	r7, [r5, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80025be:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80025c2:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80025c4:	62af      	str	r7, [r5, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80025c6:	60ec      	str	r4, [r5, #12]
  hadc1.Init.NbrOfConversion = 4;
 80025c8:	f8c5 801c 	str.w	r8, [r5, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80025cc:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80025d0:	f8c5 8014 	str.w	r8, [r5, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80025d4:	762c      	strb	r4, [r5, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80025d6:	636c      	str	r4, [r5, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80025d8:	f7fe fb72 	bl	8000cc0 <HAL_ADC_Init>
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80025dc:	a903      	add	r1, sp, #12
 80025de:	4628      	mov	r0, r5
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80025e0:	9403      	str	r4, [sp, #12]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80025e2:	f7fe feeb 	bl	80013bc <HAL_ADCEx_MultiModeConfigChannel>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025e6:	a906      	add	r1, sp, #24
 80025e8:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_2;
 80025ea:	f04f 0a02 	mov.w	sl, #2
  sConfig.Channel = ADC_CHANNEL_1;
 80025ee:	9706      	str	r7, [sp, #24]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80025f0:	9707      	str	r7, [sp, #28]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80025f2:	9409      	str	r4, [sp, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80025f4:	9408      	str	r4, [sp, #32]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80025f6:	940a      	str	r4, [sp, #40]	; 0x28
  sConfig.Offset = 0;
 80025f8:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025fa:	f7fe fd5f 	bl	80010bc <HAL_ADC_ConfigChannel>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025fe:	a906      	add	r1, sp, #24
 8002600:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_3;
 8002602:	f04f 0903 	mov.w	r9, #3
  sConfig.Channel = ADC_CHANNEL_2;
 8002606:	f8cd a018 	str.w	sl, [sp, #24]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800260a:	f8cd a01c 	str.w	sl, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800260e:	f7fe fd55 	bl	80010bc <HAL_ADC_ConfigChannel>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002612:	a906      	add	r1, sp, #24
 8002614:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_3;
 8002616:	f8cd 9018 	str.w	r9, [sp, #24]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800261a:	f8cd 901c 	str.w	r9, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800261e:	f7fe fd4d 	bl	80010bc <HAL_ADC_ConfigChannel>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002622:	a906      	add	r1, sp, #24
 8002624:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_4;
 8002626:	f8cd 8018 	str.w	r8, [sp, #24]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800262a:	f8cd 801c 	str.w	r8, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800262e:	f7fe fd45 	bl	80010bc <HAL_ADC_ConfigChannel>
  ADC_ChannelConfTypeDef sConfig = {0};
 8002632:	2218      	movs	r2, #24
 8002634:	eb0d 0002 	add.w	r0, sp, r2
 8002638:	4621      	mov	r1, r4
 800263a:	f000 f9d5 	bl	80029e8 <memset>
  hadc2.Instance = ADC2;
 800263e:	4b37      	ldr	r3, [pc, #220]	; (800271c <main+0x210>)
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002640:	60b4      	str	r4, [r6, #8]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002642:	4630      	mov	r0, r6
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002644:	e886 0018 	stmia.w	r6, {r3, r4}
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002648:	6137      	str	r7, [r6, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800264a:	7677      	strb	r7, [r6, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800264c:	f886 4020 	strb.w	r4, [r6, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002650:	62f4      	str	r4, [r6, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002652:	62b7      	str	r7, [r6, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002654:	60f4      	str	r4, [r6, #12]
  hadc2.Init.NbrOfConversion = 4;
 8002656:	f8c6 801c 	str.w	r8, [r6, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800265a:	f886 4030 	strb.w	r4, [r6, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800265e:	f8c6 8014 	str.w	r8, [r6, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8002662:	7634      	strb	r4, [r6, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002664:	6374      	str	r4, [r6, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002666:	f7fe fb2b 	bl	8000cc0 <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800266a:	a906      	add	r1, sp, #24
 800266c:	4630      	mov	r0, r6
  sConfig.Channel = ADC_CHANNEL_1;
 800266e:	9706      	str	r7, [sp, #24]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002670:	9707      	str	r7, [sp, #28]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002672:	9409      	str	r4, [sp, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002674:	9408      	str	r4, [sp, #32]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002676:	940a      	str	r4, [sp, #40]	; 0x28
  sConfig.Offset = 0;
 8002678:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800267a:	f7fe fd1f 	bl	80010bc <HAL_ADC_ConfigChannel>
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800267e:	a906      	add	r1, sp, #24
 8002680:	4630      	mov	r0, r6
  sConfig.Channel = ADC_CHANNEL_2;
 8002682:	f8cd a018 	str.w	sl, [sp, #24]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002686:	f8cd a01c 	str.w	sl, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800268a:	f7fe fd17 	bl	80010bc <HAL_ADC_ConfigChannel>
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800268e:	a906      	add	r1, sp, #24
 8002690:	4630      	mov	r0, r6
  sConfig.Channel = ADC_CHANNEL_3;
 8002692:	f8cd 9018 	str.w	r9, [sp, #24]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002696:	f8cd 901c 	str.w	r9, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800269a:	f7fe fd0f 	bl	80010bc <HAL_ADC_ConfigChannel>
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800269e:	a906      	add	r1, sp, #24
 80026a0:	4630      	mov	r0, r6
  sConfig.Channel = ADC_CHANNEL_4;
 80026a2:	f8cd 8018 	str.w	r8, [sp, #24]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80026a6:	f8cd 801c 	str.w	r8, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80026aa:	f7fe fd07 	bl	80010bc <HAL_ADC_ConfigChannel>
  hcan.Instance = CAN;
 80026ae:	481c      	ldr	r0, [pc, #112]	; (8002720 <main+0x214>)
  hcan.Init.Prescaler = 16;
 80026b0:	4a1c      	ldr	r2, [pc, #112]	; (8002724 <main+0x218>)
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80026b2:	6084      	str	r4, [r0, #8]
  hcan.Init.Prescaler = 16;
 80026b4:	2310      	movs	r3, #16
 80026b6:	e880 000c 	stmia.w	r0, {r2, r3}
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80026ba:	60c4      	str	r4, [r0, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80026bc:	6104      	str	r4, [r0, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80026be:	6144      	str	r4, [r0, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80026c0:	7604      	strb	r4, [r0, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80026c2:	7644      	strb	r4, [r0, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80026c4:	7684      	strb	r4, [r0, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80026c6:	76c4      	strb	r4, [r0, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80026c8:	7704      	strb	r4, [r0, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80026ca:	7744      	strb	r4, [r0, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80026cc:	f7fe fee6 	bl	800149c <HAL_CAN_Init>
HAL_ADC_Start_DMA(&hadc1,(uint32_t*)ADC1_BUF,4);
 80026d0:	4642      	mov	r2, r8
 80026d2:	4915      	ldr	r1, [pc, #84]	; (8002728 <main+0x21c>)
 80026d4:	4628      	mov	r0, r5
 80026d6:	f7fe fc69 	bl	8000fac <HAL_ADC_Start_DMA>
HAL_ADC_Start_IT(&hadc1);
 80026da:	4628      	mov	r0, r5
 80026dc:	f7fe fbea 	bl	8000eb4 <HAL_ADC_Start_IT>
HAL_ADC_Start_DMA(&hadc2,(uint32_t*)ADC2_BUF,4);
 80026e0:	4642      	mov	r2, r8
 80026e2:	4912      	ldr	r1, [pc, #72]	; (800272c <main+0x220>)
 80026e4:	4630      	mov	r0, r6
 80026e6:	f7fe fc61 	bl	8000fac <HAL_ADC_Start_DMA>
HAL_ADC_Start_IT(&hadc2);
 80026ea:	4630      	mov	r0, r6
 80026ec:	f7fe fbe2 	bl	8000eb4 <HAL_ADC_Start_IT>
	  HAL_ADC_Start_IT(&hadc1);
 80026f0:	4628      	mov	r0, r5
 80026f2:	f7fe fbdf 	bl	8000eb4 <HAL_ADC_Start_IT>
	  HAL_ADC_Start_IT(&hadc2);
 80026f6:	4630      	mov	r0, r6
 80026f8:	f7fe fbdc 	bl	8000eb4 <HAL_ADC_Start_IT>
	  sampToTemp();
 80026fc:	f7ff fe4c 	bl	8002398 <sampToTemp>
	  sampToVolt();
 8002700:	f7ff fe96 	bl	8002430 <sampToVolt>
	  HAL_Delay(100);
 8002704:	2064      	movs	r0, #100	; 0x64
 8002706:	f7fe fa2f 	bl	8000b68 <HAL_Delay>
 800270a:	e7f1      	b.n	80026f0 <main+0x1e4>
 800270c:	40021000 	.word	0x40021000
 8002710:	20000098 	.word	0x20000098
 8002714:	48001400 	.word	0x48001400
 8002718:	20000128 	.word	0x20000128
 800271c:	50000100 	.word	0x50000100
 8002720:	200000e8 	.word	0x200000e8
 8002724:	40006400 	.word	0x40006400
 8002728:	20000110 	.word	0x20000110
 800272c:	20000178 	.word	0x20000178

08002730 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002730:	4770      	bx	lr
	...

08002734 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002734:	4b0a      	ldr	r3, [pc, #40]	; (8002760 <HAL_MspInit+0x2c>)
 8002736:	699a      	ldr	r2, [r3, #24]
 8002738:	f042 0201 	orr.w	r2, r2, #1
 800273c:	619a      	str	r2, [r3, #24]
 800273e:	699a      	ldr	r2, [r3, #24]
{
 8002740:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002742:	f002 0201 	and.w	r2, r2, #1
 8002746:	9200      	str	r2, [sp, #0]
 8002748:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800274a:	69da      	ldr	r2, [r3, #28]
 800274c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002750:	61da      	str	r2, [r3, #28]
 8002752:	69db      	ldr	r3, [r3, #28]
 8002754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002758:	9301      	str	r3, [sp, #4]
 800275a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800275c:	b002      	add	sp, #8
 800275e:	4770      	bx	lr
 8002760:	40021000 	.word	0x40021000

08002764 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002764:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002766:	2214      	movs	r2, #20
{
 8002768:	b08b      	sub	sp, #44	; 0x2c
 800276a:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800276c:	2100      	movs	r1, #0
 800276e:	eb0d 0002 	add.w	r0, sp, r2
 8002772:	f000 f939 	bl	80029e8 <memset>
  if(hadc->Instance==ADC1)
 8002776:	682b      	ldr	r3, [r5, #0]
 8002778:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800277c:	d13c      	bne.n	80027f8 <HAL_ADC_MspInit+0x94>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800277e:	4a32      	ldr	r2, [pc, #200]	; (8002848 <HAL_ADC_MspInit+0xe4>)
 8002780:	6813      	ldr	r3, [r2, #0]
 8002782:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002784:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002786:	6013      	str	r3, [r2, #0]
 8002788:	4b30      	ldr	r3, [pc, #192]	; (800284c <HAL_ADC_MspInit+0xe8>)
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800278a:	d108      	bne.n	800279e <HAL_ADC_MspInit+0x3a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800278c:	695a      	ldr	r2, [r3, #20]
 800278e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002792:	615a      	str	r2, [r3, #20]
 8002794:	695a      	ldr	r2, [r3, #20]
 8002796:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800279a:	9201      	str	r2, [sp, #4]
 800279c:	9a01      	ldr	r2, [sp, #4]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800279e:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80027a0:	4c2b      	ldr	r4, [pc, #172]	; (8002850 <HAL_ADC_MspInit+0xec>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027a2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80027a6:	615a      	str	r2, [r3, #20]
 80027a8:	695b      	ldr	r3, [r3, #20]
 80027aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ae:	9302      	str	r3, [sp, #8]
 80027b0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80027b2:	230f      	movs	r3, #15
 80027b4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b6:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027b8:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027be:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027c0:	f7ff f912 	bl	80019e8 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 80027c4:	4b23      	ldr	r3, [pc, #140]	; (8002854 <HAL_ADC_MspInit+0xf0>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel2;
 80027c6:	6023      	str	r3, [r4, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80027c8:	2280      	movs	r2, #128	; 0x80
 80027ca:	60e2      	str	r2, [r4, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80027cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027d0:	6122      	str	r2, [r4, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80027d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027d6:	2300      	movs	r3, #0
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80027d8:	6162      	str	r2, [r4, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80027da:	2220      	movs	r2, #32
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027dc:	6063      	str	r3, [r4, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80027de:	60a3      	str	r3, [r4, #8]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80027e0:	61a2      	str	r2, [r4, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80027e2:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80027e4:	4620      	mov	r0, r4
 80027e6:	f7ff f849 	bl	800187c <HAL_DMA_Init>
 80027ea:	b108      	cbz	r0, 80027f0 <HAL_ADC_MspInit+0x8c>
    {
      Error_Handler();
 80027ec:	f7ff ffa0 	bl	8002730 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80027f0:	63ac      	str	r4, [r5, #56]	; 0x38
 80027f2:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80027f4:	b00b      	add	sp, #44	; 0x2c
 80027f6:	bd30      	pop	{r4, r5, pc}
  else if(hadc->Instance==ADC2)
 80027f8:	4a17      	ldr	r2, [pc, #92]	; (8002858 <HAL_ADC_MspInit+0xf4>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d1fa      	bne.n	80027f4 <HAL_ADC_MspInit+0x90>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80027fe:	4a12      	ldr	r2, [pc, #72]	; (8002848 <HAL_ADC_MspInit+0xe4>)
 8002800:	6813      	ldr	r3, [r2, #0]
 8002802:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002804:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002806:	6013      	str	r3, [r2, #0]
 8002808:	4b10      	ldr	r3, [pc, #64]	; (800284c <HAL_ADC_MspInit+0xe8>)
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800280a:	d108      	bne.n	800281e <HAL_ADC_MspInit+0xba>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800280c:	695a      	ldr	r2, [r3, #20]
 800280e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002812:	615a      	str	r2, [r3, #20]
 8002814:	695a      	ldr	r2, [r3, #20]
 8002816:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800281a:	9203      	str	r2, [sp, #12]
 800281c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800281e:	695a      	ldr	r2, [r3, #20]
    hdma_adc2.Instance = DMA1_Channel2;
 8002820:	4c0e      	ldr	r4, [pc, #56]	; (800285c <HAL_ADC_MspInit+0xf8>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002822:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002826:	615a      	str	r2, [r3, #20]
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800282e:	9304      	str	r3, [sp, #16]
 8002830:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002832:	23f0      	movs	r3, #240	; 0xf0
 8002834:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002836:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002838:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800283a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800283e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002840:	f7ff f8d2 	bl	80019e8 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8002844:	4b06      	ldr	r3, [pc, #24]	; (8002860 <HAL_ADC_MspInit+0xfc>)
 8002846:	e7be      	b.n	80027c6 <HAL_ADC_MspInit+0x62>
 8002848:	20000090 	.word	0x20000090
 800284c:	40021000 	.word	0x40021000
 8002850:	20000188 	.word	0x20000188
 8002854:	40020008 	.word	0x40020008
 8002858:	50000100 	.word	0x50000100
 800285c:	200001cc 	.word	0x200001cc
 8002860:	4002001c 	.word	0x4002001c

08002864 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002864:	b510      	push	{r4, lr}
 8002866:	4604      	mov	r4, r0
 8002868:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800286a:	2214      	movs	r2, #20
 800286c:	2100      	movs	r1, #0
 800286e:	a803      	add	r0, sp, #12
 8002870:	f000 f8ba 	bl	80029e8 <memset>
  if(hcan->Instance==CAN)
 8002874:	6822      	ldr	r2, [r4, #0]
 8002876:	4b1b      	ldr	r3, [pc, #108]	; (80028e4 <HAL_CAN_MspInit+0x80>)
 8002878:	429a      	cmp	r2, r3
 800287a:	d131      	bne.n	80028e0 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800287c:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002880:	a903      	add	r1, sp, #12
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002882:	69da      	ldr	r2, [r3, #28]
 8002884:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002888:	61da      	str	r2, [r3, #28]
 800288a:	69da      	ldr	r2, [r3, #28]
 800288c:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8002890:	9201      	str	r2, [sp, #4]
 8002892:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002894:	695a      	ldr	r2, [r3, #20]
 8002896:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800289a:	615a      	str	r2, [r3, #20]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a2:	9302      	str	r3, [sp, #8]
 80028a4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80028a6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80028aa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ac:	2302      	movs	r3, #2
 80028ae:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028b0:	2303      	movs	r3, #3
 80028b2:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80028b8:	2309      	movs	r3, #9
 80028ba:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028bc:	f7ff f894 	bl	80019e8 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 80028c0:	2200      	movs	r2, #0
 80028c2:	4611      	mov	r1, r2
 80028c4:	2014      	movs	r0, #20
 80028c6:	f7fe ff81 	bl	80017cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 80028ca:	2014      	movs	r0, #20
 80028cc:	f7fe ffb2 	bl	8001834 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 0, 0);
 80028d0:	2200      	movs	r2, #0
 80028d2:	2015      	movs	r0, #21
 80028d4:	4611      	mov	r1, r2
 80028d6:	f7fe ff79 	bl	80017cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 80028da:	2015      	movs	r0, #21
 80028dc:	f7fe ffaa 	bl	8001834 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80028e0:	b008      	add	sp, #32
 80028e2:	bd10      	pop	{r4, pc}
 80028e4:	40006400 	.word	0x40006400

080028e8 <NMI_Handler>:
 80028e8:	4770      	bx	lr

080028ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028ea:	e7fe      	b.n	80028ea <HardFault_Handler>

080028ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028ec:	e7fe      	b.n	80028ec <MemManage_Handler>

080028ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028ee:	e7fe      	b.n	80028ee <BusFault_Handler>

080028f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028f0:	e7fe      	b.n	80028f0 <UsageFault_Handler>

080028f2 <SVC_Handler>:
 80028f2:	4770      	bx	lr

080028f4 <DebugMon_Handler>:
 80028f4:	4770      	bx	lr

080028f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028f6:	4770      	bx	lr

080028f8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028f8:	f7fe b924 	b.w	8000b44 <HAL_IncTick>

080028fc <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80028fc:	4801      	ldr	r0, [pc, #4]	; (8002904 <DMA1_Channel1_IRQHandler+0x8>)
 80028fe:	f7ff b82a 	b.w	8001956 <HAL_DMA_IRQHandler>
 8002902:	bf00      	nop
 8002904:	20000188 	.word	0x20000188

08002908 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002908:	4801      	ldr	r0, [pc, #4]	; (8002910 <DMA1_Channel2_IRQHandler+0x8>)
 800290a:	f7ff b824 	b.w	8001956 <HAL_DMA_IRQHandler>
 800290e:	bf00      	nop
 8002910:	200001cc 	.word	0x200001cc

08002914 <CAN_RX1_IRQHandler>:
void CAN_RX1_IRQHandler(void)
{
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002914:	4801      	ldr	r0, [pc, #4]	; (800291c <CAN_RX1_IRQHandler+0x8>)
 8002916:	f7fe be49 	b.w	80015ac <HAL_CAN_IRQHandler>
 800291a:	bf00      	nop
 800291c:	200000e8 	.word	0x200000e8

08002920 <CAN_RX0_IRQHandler>:
 8002920:	f7ff bff8 	b.w	8002914 <CAN_RX1_IRQHandler>

08002924 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002924:	4b05      	ldr	r3, [pc, #20]	; (800293c <SystemInit+0x18>)
 8002926:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800292a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800292e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002932:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002936:	609a      	str	r2, [r3, #8]
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	e000ed00 	.word	0xe000ed00

08002940 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002940:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002978 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002944:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002946:	e003      	b.n	8002950 <LoopCopyDataInit>

08002948 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002948:	4b0c      	ldr	r3, [pc, #48]	; (800297c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800294a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800294c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800294e:	3104      	adds	r1, #4

08002950 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002950:	480b      	ldr	r0, [pc, #44]	; (8002980 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002952:	4b0c      	ldr	r3, [pc, #48]	; (8002984 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002954:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002956:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002958:	d3f6      	bcc.n	8002948 <CopyDataInit>
	ldr	r2, =_sbss
 800295a:	4a0b      	ldr	r2, [pc, #44]	; (8002988 <LoopForever+0x12>)
	b	LoopFillZerobss
 800295c:	e002      	b.n	8002964 <LoopFillZerobss>

0800295e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800295e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002960:	f842 3b04 	str.w	r3, [r2], #4

08002964 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002964:	4b09      	ldr	r3, [pc, #36]	; (800298c <LoopForever+0x16>)
	cmp	r2, r3
 8002966:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002968:	d3f9      	bcc.n	800295e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800296a:	f7ff ffdb 	bl	8002924 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800296e:	f000 f817 	bl	80029a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002972:	f7ff fdcb 	bl	800250c <main>

08002976 <LoopForever>:

LoopForever:
    b LoopForever
 8002976:	e7fe      	b.n	8002976 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002978:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 800297c:	08002f14 	.word	0x08002f14
	ldr	r0, =_sdata
 8002980:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002984:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8002988:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 800298c:	20000210 	.word	0x20000210

08002990 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002990:	e7fe      	b.n	8002990 <ADC1_2_IRQHandler>
	...

08002994 <__errno>:
 8002994:	4b01      	ldr	r3, [pc, #4]	; (800299c <__errno+0x8>)
 8002996:	6818      	ldr	r0, [r3, #0]
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	2000000c 	.word	0x2000000c

080029a0 <__libc_init_array>:
 80029a0:	b570      	push	{r4, r5, r6, lr}
 80029a2:	4e0d      	ldr	r6, [pc, #52]	; (80029d8 <__libc_init_array+0x38>)
 80029a4:	4c0d      	ldr	r4, [pc, #52]	; (80029dc <__libc_init_array+0x3c>)
 80029a6:	1ba4      	subs	r4, r4, r6
 80029a8:	10a4      	asrs	r4, r4, #2
 80029aa:	2500      	movs	r5, #0
 80029ac:	42a5      	cmp	r5, r4
 80029ae:	d109      	bne.n	80029c4 <__libc_init_array+0x24>
 80029b0:	4e0b      	ldr	r6, [pc, #44]	; (80029e0 <__libc_init_array+0x40>)
 80029b2:	4c0c      	ldr	r4, [pc, #48]	; (80029e4 <__libc_init_array+0x44>)
 80029b4:	f000 fa84 	bl	8002ec0 <_init>
 80029b8:	1ba4      	subs	r4, r4, r6
 80029ba:	10a4      	asrs	r4, r4, #2
 80029bc:	2500      	movs	r5, #0
 80029be:	42a5      	cmp	r5, r4
 80029c0:	d105      	bne.n	80029ce <__libc_init_array+0x2e>
 80029c2:	bd70      	pop	{r4, r5, r6, pc}
 80029c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80029c8:	4798      	blx	r3
 80029ca:	3501      	adds	r5, #1
 80029cc:	e7ee      	b.n	80029ac <__libc_init_array+0xc>
 80029ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80029d2:	4798      	blx	r3
 80029d4:	3501      	adds	r5, #1
 80029d6:	e7f2      	b.n	80029be <__libc_init_array+0x1e>
 80029d8:	08002f0c 	.word	0x08002f0c
 80029dc:	08002f0c 	.word	0x08002f0c
 80029e0:	08002f0c 	.word	0x08002f0c
 80029e4:	08002f10 	.word	0x08002f10

080029e8 <memset>:
 80029e8:	4402      	add	r2, r0
 80029ea:	4603      	mov	r3, r0
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d100      	bne.n	80029f2 <memset+0xa>
 80029f0:	4770      	bx	lr
 80029f2:	f803 1b01 	strb.w	r1, [r3], #1
 80029f6:	e7f9      	b.n	80029ec <memset+0x4>

080029f8 <log>:
 80029f8:	b570      	push	{r4, r5, r6, lr}
 80029fa:	ed2d 8b02 	vpush	{d8}
 80029fe:	b08a      	sub	sp, #40	; 0x28
 8002a00:	ec55 4b10 	vmov	r4, r5, d0
 8002a04:	f000 f878 	bl	8002af8 <__ieee754_log>
 8002a08:	4b36      	ldr	r3, [pc, #216]	; (8002ae4 <log+0xec>)
 8002a0a:	eeb0 8a40 	vmov.f32	s16, s0
 8002a0e:	eef0 8a60 	vmov.f32	s17, s1
 8002a12:	f993 6000 	ldrsb.w	r6, [r3]
 8002a16:	1c73      	adds	r3, r6, #1
 8002a18:	d05b      	beq.n	8002ad2 <log+0xda>
 8002a1a:	4622      	mov	r2, r4
 8002a1c:	462b      	mov	r3, r5
 8002a1e:	4620      	mov	r0, r4
 8002a20:	4629      	mov	r1, r5
 8002a22:	f7fe f823 	bl	8000a6c <__aeabi_dcmpun>
 8002a26:	2800      	cmp	r0, #0
 8002a28:	d153      	bne.n	8002ad2 <log+0xda>
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	4620      	mov	r0, r4
 8002a30:	4629      	mov	r1, r5
 8002a32:	f7fe f811 	bl	8000a58 <__aeabi_dcmpgt>
 8002a36:	2800      	cmp	r0, #0
 8002a38:	d14b      	bne.n	8002ad2 <log+0xda>
 8002a3a:	4b2b      	ldr	r3, [pc, #172]	; (8002ae8 <log+0xf0>)
 8002a3c:	9301      	str	r3, [sp, #4]
 8002a3e:	9008      	str	r0, [sp, #32]
 8002a40:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002a44:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8002a48:	b9a6      	cbnz	r6, 8002a74 <log+0x7c>
 8002a4a:	4b28      	ldr	r3, [pc, #160]	; (8002aec <log+0xf4>)
 8002a4c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8002a50:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002a54:	4620      	mov	r0, r4
 8002a56:	2200      	movs	r2, #0
 8002a58:	2300      	movs	r3, #0
 8002a5a:	4629      	mov	r1, r5
 8002a5c:	f7fd ffd4 	bl	8000a08 <__aeabi_dcmpeq>
 8002a60:	bb40      	cbnz	r0, 8002ab4 <log+0xbc>
 8002a62:	2301      	movs	r3, #1
 8002a64:	2e02      	cmp	r6, #2
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	d119      	bne.n	8002a9e <log+0xa6>
 8002a6a:	f7ff ff93 	bl	8002994 <__errno>
 8002a6e:	2321      	movs	r3, #33	; 0x21
 8002a70:	6003      	str	r3, [r0, #0]
 8002a72:	e019      	b.n	8002aa8 <log+0xb0>
 8002a74:	4b1e      	ldr	r3, [pc, #120]	; (8002af0 <log+0xf8>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002a7c:	4620      	mov	r0, r4
 8002a7e:	2200      	movs	r2, #0
 8002a80:	2300      	movs	r3, #0
 8002a82:	4629      	mov	r1, r5
 8002a84:	f7fd ffc0 	bl	8000a08 <__aeabi_dcmpeq>
 8002a88:	2800      	cmp	r0, #0
 8002a8a:	d0ea      	beq.n	8002a62 <log+0x6a>
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	429e      	cmp	r6, r3
 8002a90:	9300      	str	r3, [sp, #0]
 8002a92:	d111      	bne.n	8002ab8 <log+0xc0>
 8002a94:	f7ff ff7e 	bl	8002994 <__errno>
 8002a98:	2322      	movs	r3, #34	; 0x22
 8002a9a:	6003      	str	r3, [r0, #0]
 8002a9c:	e011      	b.n	8002ac2 <log+0xca>
 8002a9e:	4668      	mov	r0, sp
 8002aa0:	f000 fa02 	bl	8002ea8 <matherr>
 8002aa4:	2800      	cmp	r0, #0
 8002aa6:	d0e0      	beq.n	8002a6a <log+0x72>
 8002aa8:	4812      	ldr	r0, [pc, #72]	; (8002af4 <log+0xfc>)
 8002aaa:	f000 fa01 	bl	8002eb0 <nan>
 8002aae:	ed8d 0b06 	vstr	d0, [sp, #24]
 8002ab2:	e006      	b.n	8002ac2 <log+0xca>
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	9300      	str	r3, [sp, #0]
 8002ab8:	4668      	mov	r0, sp
 8002aba:	f000 f9f5 	bl	8002ea8 <matherr>
 8002abe:	2800      	cmp	r0, #0
 8002ac0:	d0e8      	beq.n	8002a94 <log+0x9c>
 8002ac2:	9b08      	ldr	r3, [sp, #32]
 8002ac4:	b11b      	cbz	r3, 8002ace <log+0xd6>
 8002ac6:	f7ff ff65 	bl	8002994 <__errno>
 8002aca:	9b08      	ldr	r3, [sp, #32]
 8002acc:	6003      	str	r3, [r0, #0]
 8002ace:	ed9d 8b06 	vldr	d8, [sp, #24]
 8002ad2:	eeb0 0a48 	vmov.f32	s0, s16
 8002ad6:	eef0 0a68 	vmov.f32	s1, s17
 8002ada:	b00a      	add	sp, #40	; 0x28
 8002adc:	ecbd 8b02 	vpop	{d8}
 8002ae0:	bd70      	pop	{r4, r5, r6, pc}
 8002ae2:	bf00      	nop
 8002ae4:	20000070 	.word	0x20000070
 8002ae8:	08002f08 	.word	0x08002f08
 8002aec:	c7efffff 	.word	0xc7efffff
 8002af0:	fff00000 	.word	0xfff00000
 8002af4:	08002f0b 	.word	0x08002f0b

08002af8 <__ieee754_log>:
 8002af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002afc:	ec51 0b10 	vmov	r0, r1, d0
 8002b00:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8002b04:	b087      	sub	sp, #28
 8002b06:	ee10 3a10 	vmov	r3, s0
 8002b0a:	460d      	mov	r5, r1
 8002b0c:	da27      	bge.n	8002b5e <__ieee754_log+0x66>
 8002b0e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8002b12:	4313      	orrs	r3, r2
 8002b14:	d10a      	bne.n	8002b2c <__ieee754_log+0x34>
 8002b16:	49cc      	ldr	r1, [pc, #816]	; (8002e48 <__ieee754_log+0x350>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	2000      	movs	r0, #0
 8002b1e:	f7fd fe35 	bl	800078c <__aeabi_ddiv>
 8002b22:	ec41 0b10 	vmov	d0, r0, r1
 8002b26:	b007      	add	sp, #28
 8002b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b2c:	2900      	cmp	r1, #0
 8002b2e:	da07      	bge.n	8002b40 <__ieee754_log+0x48>
 8002b30:	ee10 2a10 	vmov	r2, s0
 8002b34:	460b      	mov	r3, r1
 8002b36:	f7fd fb4b 	bl	80001d0 <__aeabi_dsub>
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	e7ee      	b.n	8002b1e <__ieee754_log+0x26>
 8002b40:	4bc2      	ldr	r3, [pc, #776]	; (8002e4c <__ieee754_log+0x354>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	f7fd fcf8 	bl	8000538 <__aeabi_dmul>
 8002b48:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8002b4c:	460d      	mov	r5, r1
 8002b4e:	4ac0      	ldr	r2, [pc, #768]	; (8002e50 <__ieee754_log+0x358>)
 8002b50:	4295      	cmp	r5, r2
 8002b52:	dd06      	ble.n	8002b62 <__ieee754_log+0x6a>
 8002b54:	4602      	mov	r2, r0
 8002b56:	460b      	mov	r3, r1
 8002b58:	f7fd fb3c 	bl	80001d4 <__adddf3>
 8002b5c:	e7e1      	b.n	8002b22 <__ieee754_log+0x2a>
 8002b5e:	2300      	movs	r3, #0
 8002b60:	e7f5      	b.n	8002b4e <__ieee754_log+0x56>
 8002b62:	152c      	asrs	r4, r5, #20
 8002b64:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8002b68:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8002b6c:	441c      	add	r4, r3
 8002b6e:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8002b72:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8002b76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b7a:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8002b7e:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8002b82:	ea42 0105 	orr.w	r1, r2, r5
 8002b86:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	4bb1      	ldr	r3, [pc, #708]	; (8002e54 <__ieee754_log+0x35c>)
 8002b8e:	f7fd fb1f 	bl	80001d0 <__aeabi_dsub>
 8002b92:	1cab      	adds	r3, r5, #2
 8002b94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	4682      	mov	sl, r0
 8002b9c:	468b      	mov	fp, r1
 8002b9e:	f04f 0200 	mov.w	r2, #0
 8002ba2:	dc5b      	bgt.n	8002c5c <__ieee754_log+0x164>
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	f7fd ff2f 	bl	8000a08 <__aeabi_dcmpeq>
 8002baa:	b1d0      	cbz	r0, 8002be2 <__ieee754_log+0xea>
 8002bac:	2c00      	cmp	r4, #0
 8002bae:	f000 8170 	beq.w	8002e92 <__ieee754_log+0x39a>
 8002bb2:	4620      	mov	r0, r4
 8002bb4:	f7fd fc5a 	bl	800046c <__aeabi_i2d>
 8002bb8:	a38f      	add	r3, pc, #572	; (adr r3, 8002df8 <__ieee754_log+0x300>)
 8002bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bbe:	4606      	mov	r6, r0
 8002bc0:	460f      	mov	r7, r1
 8002bc2:	f7fd fcb9 	bl	8000538 <__aeabi_dmul>
 8002bc6:	a38e      	add	r3, pc, #568	; (adr r3, 8002e00 <__ieee754_log+0x308>)
 8002bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bcc:	4604      	mov	r4, r0
 8002bce:	460d      	mov	r5, r1
 8002bd0:	4630      	mov	r0, r6
 8002bd2:	4639      	mov	r1, r7
 8002bd4:	f7fd fcb0 	bl	8000538 <__aeabi_dmul>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	460b      	mov	r3, r1
 8002bdc:	4620      	mov	r0, r4
 8002bde:	4629      	mov	r1, r5
 8002be0:	e7ba      	b.n	8002b58 <__ieee754_log+0x60>
 8002be2:	a389      	add	r3, pc, #548	; (adr r3, 8002e08 <__ieee754_log+0x310>)
 8002be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be8:	4650      	mov	r0, sl
 8002bea:	4659      	mov	r1, fp
 8002bec:	f7fd fca4 	bl	8000538 <__aeabi_dmul>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	2000      	movs	r0, #0
 8002bf6:	4998      	ldr	r1, [pc, #608]	; (8002e58 <__ieee754_log+0x360>)
 8002bf8:	f7fd faea 	bl	80001d0 <__aeabi_dsub>
 8002bfc:	4652      	mov	r2, sl
 8002bfe:	4606      	mov	r6, r0
 8002c00:	460f      	mov	r7, r1
 8002c02:	465b      	mov	r3, fp
 8002c04:	4650      	mov	r0, sl
 8002c06:	4659      	mov	r1, fp
 8002c08:	f7fd fc96 	bl	8000538 <__aeabi_dmul>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	460b      	mov	r3, r1
 8002c10:	4630      	mov	r0, r6
 8002c12:	4639      	mov	r1, r7
 8002c14:	f7fd fc90 	bl	8000538 <__aeabi_dmul>
 8002c18:	4606      	mov	r6, r0
 8002c1a:	460f      	mov	r7, r1
 8002c1c:	b934      	cbnz	r4, 8002c2c <__ieee754_log+0x134>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	460b      	mov	r3, r1
 8002c22:	4650      	mov	r0, sl
 8002c24:	4659      	mov	r1, fp
 8002c26:	f7fd fad3 	bl	80001d0 <__aeabi_dsub>
 8002c2a:	e77a      	b.n	8002b22 <__ieee754_log+0x2a>
 8002c2c:	4620      	mov	r0, r4
 8002c2e:	f7fd fc1d 	bl	800046c <__aeabi_i2d>
 8002c32:	a371      	add	r3, pc, #452	; (adr r3, 8002df8 <__ieee754_log+0x300>)
 8002c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c38:	4680      	mov	r8, r0
 8002c3a:	4689      	mov	r9, r1
 8002c3c:	f7fd fc7c 	bl	8000538 <__aeabi_dmul>
 8002c40:	a36f      	add	r3, pc, #444	; (adr r3, 8002e00 <__ieee754_log+0x308>)
 8002c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c46:	4604      	mov	r4, r0
 8002c48:	460d      	mov	r5, r1
 8002c4a:	4640      	mov	r0, r8
 8002c4c:	4649      	mov	r1, r9
 8002c4e:	f7fd fc73 	bl	8000538 <__aeabi_dmul>
 8002c52:	4602      	mov	r2, r0
 8002c54:	460b      	mov	r3, r1
 8002c56:	4630      	mov	r0, r6
 8002c58:	4639      	mov	r1, r7
 8002c5a:	e0b2      	b.n	8002dc2 <__ieee754_log+0x2ca>
 8002c5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c60:	f7fd fab8 	bl	80001d4 <__adddf3>
 8002c64:	4602      	mov	r2, r0
 8002c66:	460b      	mov	r3, r1
 8002c68:	4650      	mov	r0, sl
 8002c6a:	4659      	mov	r1, fp
 8002c6c:	f7fd fd8e 	bl	800078c <__aeabi_ddiv>
 8002c70:	e9cd 0100 	strd	r0, r1, [sp]
 8002c74:	4620      	mov	r0, r4
 8002c76:	f7fd fbf9 	bl	800046c <__aeabi_i2d>
 8002c7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002c7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002c82:	4610      	mov	r0, r2
 8002c84:	4619      	mov	r1, r3
 8002c86:	f7fd fc57 	bl	8000538 <__aeabi_dmul>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002c92:	f7fd fc51 	bl	8000538 <__aeabi_dmul>
 8002c96:	a35e      	add	r3, pc, #376	; (adr r3, 8002e10 <__ieee754_log+0x318>)
 8002c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c9c:	4606      	mov	r6, r0
 8002c9e:	460f      	mov	r7, r1
 8002ca0:	f7fd fc4a 	bl	8000538 <__aeabi_dmul>
 8002ca4:	a35c      	add	r3, pc, #368	; (adr r3, 8002e18 <__ieee754_log+0x320>)
 8002ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002caa:	f7fd fa93 	bl	80001d4 <__adddf3>
 8002cae:	4632      	mov	r2, r6
 8002cb0:	463b      	mov	r3, r7
 8002cb2:	f7fd fc41 	bl	8000538 <__aeabi_dmul>
 8002cb6:	a35a      	add	r3, pc, #360	; (adr r3, 8002e20 <__ieee754_log+0x328>)
 8002cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cbc:	f7fd fa8a 	bl	80001d4 <__adddf3>
 8002cc0:	4632      	mov	r2, r6
 8002cc2:	463b      	mov	r3, r7
 8002cc4:	f7fd fc38 	bl	8000538 <__aeabi_dmul>
 8002cc8:	a357      	add	r3, pc, #348	; (adr r3, 8002e28 <__ieee754_log+0x330>)
 8002cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cce:	f7fd fa81 	bl	80001d4 <__adddf3>
 8002cd2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002cd6:	f7fd fc2f 	bl	8000538 <__aeabi_dmul>
 8002cda:	a355      	add	r3, pc, #340	; (adr r3, 8002e30 <__ieee754_log+0x338>)
 8002cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002ce4:	4630      	mov	r0, r6
 8002ce6:	4639      	mov	r1, r7
 8002ce8:	f7fd fc26 	bl	8000538 <__aeabi_dmul>
 8002cec:	a352      	add	r3, pc, #328	; (adr r3, 8002e38 <__ieee754_log+0x340>)
 8002cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf2:	f7fd fa6f 	bl	80001d4 <__adddf3>
 8002cf6:	4632      	mov	r2, r6
 8002cf8:	463b      	mov	r3, r7
 8002cfa:	f7fd fc1d 	bl	8000538 <__aeabi_dmul>
 8002cfe:	a350      	add	r3, pc, #320	; (adr r3, 8002e40 <__ieee754_log+0x348>)
 8002d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d04:	f7fd fa66 	bl	80001d4 <__adddf3>
 8002d08:	4632      	mov	r2, r6
 8002d0a:	463b      	mov	r3, r7
 8002d0c:	f7fd fc14 	bl	8000538 <__aeabi_dmul>
 8002d10:	f5a5 28c2 	sub.w	r8, r5, #397312	; 0x61000
 8002d14:	4602      	mov	r2, r0
 8002d16:	460b      	mov	r3, r1
 8002d18:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8002d1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002d20:	f7fd fa58 	bl	80001d4 <__adddf3>
 8002d24:	f2a8 487a 	subw	r8, r8, #1146	; 0x47a
 8002d28:	3551      	adds	r5, #81	; 0x51
 8002d2a:	ea45 0508 	orr.w	r5, r5, r8
 8002d2e:	2d00      	cmp	r5, #0
 8002d30:	4606      	mov	r6, r0
 8002d32:	460f      	mov	r7, r1
 8002d34:	dd50      	ble.n	8002dd8 <__ieee754_log+0x2e0>
 8002d36:	2200      	movs	r2, #0
 8002d38:	4b47      	ldr	r3, [pc, #284]	; (8002e58 <__ieee754_log+0x360>)
 8002d3a:	4650      	mov	r0, sl
 8002d3c:	4659      	mov	r1, fp
 8002d3e:	f7fd fbfb 	bl	8000538 <__aeabi_dmul>
 8002d42:	4652      	mov	r2, sl
 8002d44:	465b      	mov	r3, fp
 8002d46:	f7fd fbf7 	bl	8000538 <__aeabi_dmul>
 8002d4a:	4680      	mov	r8, r0
 8002d4c:	4689      	mov	r9, r1
 8002d4e:	b994      	cbnz	r4, 8002d76 <__ieee754_log+0x27e>
 8002d50:	4602      	mov	r2, r0
 8002d52:	460b      	mov	r3, r1
 8002d54:	4630      	mov	r0, r6
 8002d56:	4639      	mov	r1, r7
 8002d58:	f7fd fa3c 	bl	80001d4 <__adddf3>
 8002d5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002d60:	f7fd fbea 	bl	8000538 <__aeabi_dmul>
 8002d64:	4602      	mov	r2, r0
 8002d66:	460b      	mov	r3, r1
 8002d68:	4640      	mov	r0, r8
 8002d6a:	4649      	mov	r1, r9
 8002d6c:	f7fd fa30 	bl	80001d0 <__aeabi_dsub>
 8002d70:	4602      	mov	r2, r0
 8002d72:	460b      	mov	r3, r1
 8002d74:	e755      	b.n	8002c22 <__ieee754_log+0x12a>
 8002d76:	a320      	add	r3, pc, #128	; (adr r3, 8002df8 <__ieee754_log+0x300>)
 8002d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002d80:	f7fd fbda 	bl	8000538 <__aeabi_dmul>
 8002d84:	4642      	mov	r2, r8
 8002d86:	464b      	mov	r3, r9
 8002d88:	4604      	mov	r4, r0
 8002d8a:	460d      	mov	r5, r1
 8002d8c:	4630      	mov	r0, r6
 8002d8e:	4639      	mov	r1, r7
 8002d90:	f7fd fa20 	bl	80001d4 <__adddf3>
 8002d94:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002d98:	f7fd fbce 	bl	8000538 <__aeabi_dmul>
 8002d9c:	a318      	add	r3, pc, #96	; (adr r3, 8002e00 <__ieee754_log+0x308>)
 8002d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da2:	4606      	mov	r6, r0
 8002da4:	460f      	mov	r7, r1
 8002da6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002daa:	f7fd fbc5 	bl	8000538 <__aeabi_dmul>
 8002dae:	4602      	mov	r2, r0
 8002db0:	460b      	mov	r3, r1
 8002db2:	4630      	mov	r0, r6
 8002db4:	4639      	mov	r1, r7
 8002db6:	f7fd fa0d 	bl	80001d4 <__adddf3>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	4640      	mov	r0, r8
 8002dc0:	4649      	mov	r1, r9
 8002dc2:	f7fd fa05 	bl	80001d0 <__aeabi_dsub>
 8002dc6:	4652      	mov	r2, sl
 8002dc8:	465b      	mov	r3, fp
 8002dca:	f7fd fa01 	bl	80001d0 <__aeabi_dsub>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	4620      	mov	r0, r4
 8002dd4:	4629      	mov	r1, r5
 8002dd6:	e726      	b.n	8002c26 <__ieee754_log+0x12e>
 8002dd8:	2c00      	cmp	r4, #0
 8002dda:	d13f      	bne.n	8002e5c <__ieee754_log+0x364>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	460b      	mov	r3, r1
 8002de0:	4650      	mov	r0, sl
 8002de2:	4659      	mov	r1, fp
 8002de4:	f7fd f9f4 	bl	80001d0 <__aeabi_dsub>
 8002de8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002dec:	f7fd fba4 	bl	8000538 <__aeabi_dmul>
 8002df0:	e7be      	b.n	8002d70 <__ieee754_log+0x278>
 8002df2:	bf00      	nop
 8002df4:	f3af 8000 	nop.w
 8002df8:	fee00000 	.word	0xfee00000
 8002dfc:	3fe62e42 	.word	0x3fe62e42
 8002e00:	35793c76 	.word	0x35793c76
 8002e04:	3dea39ef 	.word	0x3dea39ef
 8002e08:	55555555 	.word	0x55555555
 8002e0c:	3fd55555 	.word	0x3fd55555
 8002e10:	df3e5244 	.word	0xdf3e5244
 8002e14:	3fc2f112 	.word	0x3fc2f112
 8002e18:	96cb03de 	.word	0x96cb03de
 8002e1c:	3fc74664 	.word	0x3fc74664
 8002e20:	94229359 	.word	0x94229359
 8002e24:	3fd24924 	.word	0x3fd24924
 8002e28:	55555593 	.word	0x55555593
 8002e2c:	3fe55555 	.word	0x3fe55555
 8002e30:	d078c69f 	.word	0xd078c69f
 8002e34:	3fc39a09 	.word	0x3fc39a09
 8002e38:	1d8e78af 	.word	0x1d8e78af
 8002e3c:	3fcc71c5 	.word	0x3fcc71c5
 8002e40:	9997fa04 	.word	0x9997fa04
 8002e44:	3fd99999 	.word	0x3fd99999
 8002e48:	c3500000 	.word	0xc3500000
 8002e4c:	43500000 	.word	0x43500000
 8002e50:	7fefffff 	.word	0x7fefffff
 8002e54:	3ff00000 	.word	0x3ff00000
 8002e58:	3fe00000 	.word	0x3fe00000
 8002e5c:	a30e      	add	r3, pc, #56	; (adr r3, 8002e98 <__ieee754_log+0x3a0>)
 8002e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002e66:	f7fd fb67 	bl	8000538 <__aeabi_dmul>
 8002e6a:	4632      	mov	r2, r6
 8002e6c:	463b      	mov	r3, r7
 8002e6e:	4604      	mov	r4, r0
 8002e70:	460d      	mov	r5, r1
 8002e72:	4650      	mov	r0, sl
 8002e74:	4659      	mov	r1, fp
 8002e76:	f7fd f9ab 	bl	80001d0 <__aeabi_dsub>
 8002e7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002e7e:	f7fd fb5b 	bl	8000538 <__aeabi_dmul>
 8002e82:	a307      	add	r3, pc, #28	; (adr r3, 8002ea0 <__ieee754_log+0x3a8>)
 8002e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e88:	4606      	mov	r6, r0
 8002e8a:	460f      	mov	r7, r1
 8002e8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002e90:	e6dd      	b.n	8002c4e <__ieee754_log+0x156>
 8002e92:	2000      	movs	r0, #0
 8002e94:	2100      	movs	r1, #0
 8002e96:	e644      	b.n	8002b22 <__ieee754_log+0x2a>
 8002e98:	fee00000 	.word	0xfee00000
 8002e9c:	3fe62e42 	.word	0x3fe62e42
 8002ea0:	35793c76 	.word	0x35793c76
 8002ea4:	3dea39ef 	.word	0x3dea39ef

08002ea8 <matherr>:
 8002ea8:	2000      	movs	r0, #0
 8002eaa:	4770      	bx	lr
 8002eac:	0000      	movs	r0, r0
	...

08002eb0 <nan>:
 8002eb0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8002eb8 <nan+0x8>
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	00000000 	.word	0x00000000
 8002ebc:	7ff80000 	.word	0x7ff80000

08002ec0 <_init>:
 8002ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ec2:	bf00      	nop
 8002ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ec6:	bc08      	pop	{r3}
 8002ec8:	469e      	mov	lr, r3
 8002eca:	4770      	bx	lr

08002ecc <_fini>:
 8002ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ece:	bf00      	nop
 8002ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ed2:	bc08      	pop	{r3}
 8002ed4:	469e      	mov	lr, r3
 8002ed6:	4770      	bx	lr
